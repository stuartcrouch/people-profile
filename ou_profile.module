<?php

/**
 * Authors Paul Dixon and Mark Williams
 *
 *
 */

 global $_ou_profile_server_site_path; $_ou_profile_server_site_path = "/people/";
 
 // Set up the database connection so that Drupal can switch to it.
 // New D7 functionality means it cant go in settings.php as Database:: context doesnt exist.
 
  $env = strtolower(getenv('OUENV'));
  if (!$env) $env = 'dev';
  switch ($env) {
    case 'live':
      $profile_database = array( 
       'database' => 'people',
       'username' => 'people_db',
       'password' => 'people_pwd_a34H',
       'host' => 'dollarbird', 
       'driver' => 'mysql', 
      );
    break;
    case 'acct':
    $profile_database = array( 
      'database' => 'people_acct',
      'username' => 'people_acct_db',
      'password' => 'people_acct_pwd',
      'host' => 'lovebird', 
      'driver' => 'mysql', 
    );
    break;
    case 'dev':
    $profile_database = array( 
      'database' => 'testprofile_dev',
      'username' => 'testprof_dev_db',
      'password' => 'testprof_dev_pwd',
      'host' => 'lovebird', 
      'driver' => 'mysql', 
    );
    break;
    case 'test':
    default:
     $profile_database = array( 
       'database' => 'people_test',
       'username' => 'people_test_db',
       'password' => 'people_test_pwd',
       'host' => 'lovebird', 
       'driver' => 'mysql', 
      );
      break;
  }
 
 // replace 'YourDatabaseKey' with something that's unique to your module
 Database::addConnectionInfo('profiles', 'default', $profile_database);
 
 db_set_active('default'); // stops web pages from timing out due to maximum execution time being exceeded (miw addition)
 
/**
 * 22-8-11 Author: Lee Austin
 *
 * Function to restructure an array based on a field
 */
function ou_profile_make_group_relations(&$inArray, &$outArray) {
  if (!is_array($inArray)) {
      return;
  }

  if (!is_array($outArray)) {
    return;
  }
  foreach ($inArray as $key => $data) {
    if (isset($data['group_name'])) {
      $outArray[$data['group_name']][$key] = $data;
    } else {
      $outArray[$key] = $data;
    }
  }
}

/**
 * Implementation of hook_cron().
 *
 * Run the appropriate cron job for each OU website that uses this module
 * Notes:
 * 1, Client cron checks the database of allowed sites so no need to check here
 * 2, OUBS reporting keeps its own copies of PIMS data so needs to run client and server crons
 * 3, Run the server cron before the client cron on OUBS reporting
 *
 */
function ou_profile_cron() {
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  watchdog("ou_profile", "Starting cron");

  $SERVER = 0;

  global $user, $user_is_admin, $staff_id, $_ou_profile_server_site_path;

  // Prepare the required values
  $p = ou_profile_node_api_params();
  if ($p['site_path'] == $_ou_profile_server_site_path)
    $SERVER = TRUE;

  if ($SERVER) { // run cron for server and OUBS reporting
    watchdog("ou_profile", "Running server cron");
    include "cron/server_cron.inc";
  }
  else {   // site is allowed to access the profiles system
    watchdog("ou_profile", "Running client cron");
    include "cron/client_cron.inc"; // run cron for client including OUBS reporting
  }
}

///////////////////////////////////
// NEW NODE API FUNCTIONS
///////////////////////////////////
$user_is_admin = FALSE;
$staff_id = NULL;
$oucu = NULL;

function ou_profile_load_node_info($unit_code, $node) {

  global $user, $user_is_admin, $staff_id;
  // Is the user an admin for this node?
  if ($user->uid) {
    $user_is_admin = ou_profile_lview_permission($unit_code, $node->uid); // returns TRUE or FALSE
  }
  else {
    $user_is_admin = FALSE;
  }

  $a_privacy_values = ou_profile_lget_privacy_values();
}

function ou_profile_node_load($nodes, $types) {

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  ou_profile_log("ou_profile_node_load");

  if (count(array_intersect(array("profile", "ou_profile"), $types))) {

    foreach ($nodes as $node) {

       // Note - node types are as follows:
       //    ou_profile: used only on the client, contains only the staff id
       //    profile: used only on the server - this is the full profile

       switch ($node->type) {
         case "profile":
           $node = ou_profile_node_load_profile($node);

           break;
         case "ou_profile":

           // If we are asked to load a profile, actually load the normal profile
           // This will load the pims and OU data for us.
            if (isset($node->field_pims_unique_id[$node->language][0]['value'])) {
              $unique_id = $node->field_pims_unique_id[$node->language][0]['value'];
              $staff_id = substr($unique_id, 0,  8);
              db_set_active('profiles');

              // Reset the entity structure incase it loaded from the server instead of us
              _field_info_collate_fields(TRUE);

              $query = 'SELECT entity_id FROM {field_data_field_oup_staff_id} WHERE field_oup_staff_id_value=\'' . $staff_id . '\'';
              $nid = db_query($query)->fetchField();

              $node = node_load($nid, NULL, FALSE);

              db_set_active('default');

            }
           break;
       }


    }
  }
}

function ou_profile_node_api_params() {
  $p = array();
  $p['a_site_info'] = ou_profile_lget_site_info();
  $p['site_name'] = variable_get('site_name', 0);
  $p['site_allowed'] = ou_profile_lsite_allowed();
  $p['site_path'] = ou_profile_lget_site_path();
  $p['unit_code'] = $p['a_site_info']['unit_code'];
  $p['site_visibility'] = (int) $p['a_site_info']['visibility'];

  return $p;
}

function ou_profile_node_load_profile($node) {

  return $node;
  global $user, $user_is_admin, $staff_id, $_ou_profile_server_site_path;


  // Prepare the required values
  $p = ou_profile_node_api_params();
  $staff_id = $node->field_oup_staff_id[$node->language][0]['value'];
//    $staff_id = ou_profile_node_get_field_value($node, 'field_oup_staff_id');
  $oucu = $node->field_oup_oucu[$node->language][0]['value']; //ou_profile_node_get_field_value($node, 'field_oup_oucu');

  db_set_active('profiles');

  $query = 'SELECT entity_id from {field_data_field_pims_staff_id} WHERE field_pims_staff_id_value = ' . $staff_id;
  $pims_entity_id = db_query($query)->fetchField();

//  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {content_type_pims} WHERE ';
//  $query .= 'field_pims_staff_id_value=' . $staff_id ;
  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {field_data_field_pims_l1_estab_unit_code} WHERE entity_id = ' . $pims_entity_id;
  $unit_code = db_query($query)->fetchField();
  db_set_active('default');

  $node->do_not_show = FALSE;

  $site_visibility = SITE_NOT_ALLOWED;
  if ($p['site_path'] == $_ou_profile_server_site_path)
    $site_visibility = SITE_PUBLIC;



  if ($p['unit_code'] || $p['site_path'] == $_ou_profile_server_site_path) {

    $profile['ou_profile_data'] = (array)$node;//ou_profile_lget_profile_data($staff_id);
    $profile['pims_data'] = ou_profile_lget_pims_data($unit_code, $staff_id);

    $profile_visibility = $profile['ou_profile_data']['field_oup_visibility'][$node->language][0]['value'];

    if (!$profile_visibility) {
      // Person does not want profile to be viewed
      $node->do_not_show = TRUE;
      return;
    }
    $NID = $profile['pims_data']['nid'];
    $VID = $profile['pims_data']['vid'];
    // Set database to profiles
    db_set_active('profiles');

    // Build a list of privacy values
    //
    ou_profile_log("building privacy values");
//     $query = 'SELECT nid, field_privacy_value_value FROM {content_type_privacy_value}';
//     $result = db_query($query);
//     //while ($data = db_fetch_object($result)) {
//     foreach ($result as $data) {
//       $a_privacy_values[$data->nid] = $data->field_privacy_value_value;
//     }
    $a_privacy_values = ou_profile_lget_privacy_values();

    $profile['privacy_values'] = $a_privacy_values;

    // Set database back to original
    db_set_active('default');

    // Put some variables into $node
    $node->ou_profile = array();

    // Display data according to privacy settings

    $a_oup_fields = array();

    // Create array of allowed "oup" fields, along with field type, single/multiple instance and label
    // Array format is:
    //  ['field_name'] => Array
    //    (
    //      ['multiple'] => value
    //      ['type'] => value
    //      ['label'] => value
    //    )

    $a_oup_fields = ou_profile_lget_oup_fields($unit_code);
    $a_pims_fields = ou_profile_lget_pims_fields();
    $a_ou_profile = array();

    // Loop over all the profile fields, populating $node->ou_profile
    foreach ($a_oup_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // Loop over all the pims fields, populating $node->ou_profile
    foreach ($a_pims_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // l.austin - Restructure $a_ou_profile array to group the elements by the 'group_name' field and apply field weighting
    $outArray = array();
    ou_profile_make_group_relations($a_ou_profile, $outArray);
    $node->ou_profile['pdata'] = $outArray;
  }
  else {
    // If there's no unit code, then the site isn't allowed access to the profiles server.
    $node->title = "Permission denied";
  }

  return $node;
}

/////////////////////////////////////////////// VIEW NODES //////////////////////////////////////////////


function ou_profile_node_view($node, $view_mode, $langcode) {
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  ou_profile_log("ou_profile_node_view");

  drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');


  switch ($node->type) {
    case "profile":
      ou_profile_node_view_profile($node, $view_mode, $langcode);
      break;
    case "ou_profile":
      ou_profile_node_view_ou_profile($node, $view_mode, $langcode);
      break;
    case "profile_page":
      ou_profile_node_view_profile_page($node, $view_mode, $langcode);
      break;
  }


}

function ou_profile_node_view_ou_profile($node, $view_mode, $langcode) {
//   // Remove local fields from ou_profile display
//   unset($node->content['field_pims_unique_id']);

//   if (isset($node->do_not_show) && $node->do_not_show) {
//     $node->title = "This profile is disabled";
//   }
//   else {
//     if ($node->ou_profile['pdata']['group_header']['field_oup_letters']['value'])
//       drupal_set_title($node->title . " - " . $node->ou_profile['pdata']['group_header']['field_oup_letters']['value']);

//     /*
//      $node->content['simple_profile'] = array(
//          '//title' => '',
//          '//weight' => 100,
//          '//value' => $node->ou_profile['simple_profile'],
//      );
//     */
//   }


}

function ou_profile_node_view_profile($node, $view_mode, $langcode) {

  $p = ou_profile_node_api_params();
  $staff_id = ou_profile_node_get_field_value($node, 'field_oup_staff_id');

  db_set_active('profiles');

  $query = 'SELECT entity_id from {field_data_field_pims_staff_id} WHERE field_pims_staff_id_value = ' . $staff_id;
  $pims_entity_id = db_query($query)->fetchField();
  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {field_data_field_pims_l1_estab_unit_code} WHERE entity_id = ' . $pims_entity_id;
  $unit_code = db_query($query)->fetchField();

  db_set_active('default');

  // Add in any PIMS data exposed by privacy values to the related PIMS data placeholder "field_pdat_*" in the profile content
  // Don't do this if the profile is being edited.
  //$a_pims_data = ou_profile_lget_pims_data($unit_code, $staff_id);

  global $user, $user_is_admin, $staff_id, $_ou_profile_server_site_path;


  // Prepare the required values
  $p = ou_profile_node_api_params();
  $staff_id = $node->field_oup_staff_id[$node->language][0]['value'];
  //    $staff_id = ou_profile_node_get_field_value($node, 'field_oup_staff_id');
  $oucu = $node->field_oup_oucu[$node->language][0]['value']; //ou_profile_node_get_field_value($node, 'field_oup_oucu');

  db_set_active('profiles');

  $query = 'SELECT entity_id from {field_data_field_pims_staff_id} WHERE field_pims_staff_id_value = ' . $staff_id;
  $pims_entity_id = db_query($query)->fetchField();

  //  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {content_type_pims} WHERE ';
  //  $query .= 'field_pims_staff_id_value=' . $staff_id ;
  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {field_data_field_pims_l1_estab_unit_code} WHERE entity_id = ' . $pims_entity_id;
  $unit_code = db_query($query)->fetchField();
  db_set_active('default');

  $node->do_not_show = FALSE;

  $site_visibility = SITE_NOT_ALLOWED;
  if ($p['site_path'] == $_ou_profile_server_site_path)
    $site_visibility = SITE_PUBLIC;

  if ($p['unit_code'] || $p['site_path'] == $_ou_profile_server_site_path) {

    $profile['ou_profile_data'] = (array)$node;//ou_profile_lget_profile_data($staff_id);
    $profile['pims_data'] = ou_profile_lget_pims_data($unit_code, $staff_id);

    $profile_visibility = $profile['ou_profile_data']['field_oup_visibility'][$node->language][0]['value'];

    if (!$profile_visibility) {
      // Person does not want profile to be viewed
      $node->do_not_show = TRUE;
      return;
    }
    $NID = $profile['pims_data']['nid'];
    $VID = $profile['pims_data']['vid'];
    // Set database to profiles
    db_set_active('profiles');

    // Build a list of privacy values
    //
    ou_profile_log("building privacy values");
    //     $query = 'SELECT nid, field_privacy_value_value FROM {content_type_privacy_value}';
    //     $result = db_query($query);
    //     //while ($data = db_fetch_object($result)) {
    //     foreach ($result as $data) {
    //       $a_privacy_values[$data->nid] = $data->field_privacy_value_value;
    //     }
    $a_privacy_values = ou_profile_lget_privacy_values();

    $profile['privacy_values'] = $a_privacy_values;

    // Set database back to original
    db_set_active('default');

    // Put some variables into $node
    $node->ou_profile = array();

    // Display data according to privacy settings

    $a_oup_fields = array();

    // Create array of allowed "oup" fields, along with field type, single/multiple instance and label
    // Array format is:
    //  ['field_name'] => Array
    //    (
    //      ['multiple'] => value
    //      ['type'] => value
    //      ['label'] => value
    //    )

    $a_oup_fields = ou_profile_lget_oup_fields($unit_code);
    $a_pims_fields = ou_profile_lget_pims_fields();
    $a_ou_profile = array();

    // Loop over all the profile fields, populating $node->ou_profile
    foreach ($a_oup_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // Loop over all the pims fields, populating $node->ou_profile
    foreach ($a_pims_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // l.austin - Restructure $a_ou_profile array to group the elements by the 'group_name' field and apply field weighting
    $outArray = array();
    ou_profile_make_group_relations($a_ou_profile, $outArray);
    $node->ou_profile['pdata'] = $outArray;
  }
  else {
    // If there's no unit code, then the site isn't allowed access to the profiles server.
    $node->title = "Permission denied";
  }

  // ==================================== Build node title ===============================

  // Start with title, e.g. Dr, but omit Mr, Mrs, Miss and Ms and extend Prof
  $staff_title = "";
  if (isset($node->field_pdat_staff_title['und']) && $node->field_pdat_staff_title['und'][0]['value']) {
    $staff_title = $node->field_pdat_staff_title['und'][0]['value'] . " ";
    if ($staff_title && $pprv_staff_title && $staff_title != "Mr" && $staff_title != "Miss" && $staff_title != "Ms" && $staff_title != "Mrs") {
      $staff_title = preg_replace("/Prof/", "Professor", $staff_title) . " ";
    }
  }
  //oupdb("staff title: $staff_title");

  // Add forenames
  $forenames = "";
  if (isset($node->field_pdat_pref_forenames['und']) && $node->field_pdat_pref_forenames['und'][0]['value']) {
    $forenames = $node->field_pdat_pref_forenames['und'][0]['value'] . " ";
  }
  else {
    if (isset($node->field_pdat_staff_forenames['und']) && $node->field_pdat_staff_forenames['und'][0]['value']) {
      $forenames = $node->field_pdat_staff_forenames['und'][0]['value'] . " ";
    }
  }
  //oupdb("forenames: $forenames");

  // Add surname
  $surname = "";
  if (isset($node->field_pdat_pref_surname['und']) && $node->field_pdat_pref_surname['und'][0]['value']) {
    $surname = $node->field_pdat_pref_surname['und'][0]['value'];
  }
  else {
    if (isset($node->field_pdat_staff_surname['und']) && $node->field_pdat_staff_surname['und'][0]['value']) {
      $surname = $node->field_pdat_staff_surname['und'][0]['value'];
    }
  }
  //oupdb("surname: $surname");

  $DO_NOT_DISPLAY=0;
  // Need at least a title and surname, or forename + surname to continue
  if (!$surname)
    $DO_NOT_DISPLAY=1;

  if (!$forenames && !$staff_title)
    $DO_NOT_DISPLAY=1;

  // If the person hasn't set privacy values to show enough of their name/title,
  // or if the profile has been made invisible / disabled, don't show the profile
  if ($DO_NOT_DISPLAY ||
      !$node->field_oup_visibility['und'][0]['value'] ||
      $node->field_oup_visibility['und'][0]['value'] < 2) {
    $node->do_not_show = TRUE;
    if (!preg_match("/edit$/", request_uri())) {
      if ($node->field_oup_visibility['und'][0]['value'] == 0)
        $node->title = "This profile has not yet been published";
      if ($node->field_oup_visibility['und'][0]['value'] == 1)
        $node->title = "This profile is only available on the intranet";
    }
    return;
  }

  if (!$user->uid || $node->uid != $user->uid || !preg_match("/edit$/", request_uri())) {
    $node->title = $staff_title . "$forenames $surname";
  }

  // If a photograph is included and the permissions allow, set the alt tags on the photo
  // And don't set anything if the page is being edited
  if (!preg_match("/edit$/", request_uri())) {
    if ($node->field_oup_photo['und'][0]['fid']) {
      $node->field_oup_photo['und'][0]['data']['alt'] = $node->title;
    }
  }

}

function ou_profile_node_view_profile_page($node,$view_mode, $langcode) {
  global $user;

  drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');
  $your_profile = "";
  $profile_list = "";

  // Traffic light colours - green, amber, red
  $a_colour = array(
      'public' => 'green',
      'intranet' => '#FF6600',
      'invisible' => 'red',
  );


  if ($user->uid > 1) {
    $query = "SELECT title,nid FROM {node} WHERE uid='%s'";
    $profile = db_fetch_object(db_query($query, $user->uid));

    if ($profile->nid) {
      // Get alias
      $query = "SELECT dst FROM {url_alias} WHERE src='%s'";
      $alias = db_result(db_query($query, 'node/' . $profile->nid));

      if (!$alias) {
        $alias = "node/$profile->nid";
      }

      //$your_profile .= "<h2>Your profile</h2>\n";
      $visibility = ou_profile_lget_profile_visibility($profile->nid);
      if ($visibility) {
        $visibility = "&nbsp<span class='oup-visibility-$visibility'>[$visibility]</span>";
      }
      $title = preg_replace("/^Profile:/", "", $profile->title);
      $your_profile .= "<h2>$title $visibility [<a href='/people/$alias'>view</a>] [<a href='node/$profile->nid/edit'>edit</a>]</h2>";
    }
  }

  // Is the user a member of any group-admin groups? If so, generate a list of profiles they can admin.
  $query = "SELECT rid FROM {users_roles} WHERE uid = :uid";

  $result = db_query($query, array(":uid" => $user->uid));
  //while ($data = db_fetch_object($result)) {
  foreach ($result as $data) {
    if ($data->rid) {

      $group_query = "SELECT name FROM {role} WHERE rid = :rid AND name LIKE :name";

      $group_result = db_query($group_query, array(":rid" => $data->rid, ":name" => 'PP%'));

      //while ($group_data = db_fetch_object($group_result)) {
      foreach ($group_result as $group_data) {
        // We only want People Profile groups / roles. These have the format PP0123, i.e. PP + 4 digits
        // - the 4 digits being the level 1 estab unit code.
        if (preg_match("/^PP\d\d\d\d$/", $group_data->name)) {
          //oupdb("Matched group: $group_data->name");
          $unit_id = substr($group_data->name, -4);
          //oupdb("Unit ID: $unit_id");
          $pims_query = "SELECT field_pims_staff_id_value FROM {content_type_pims} " .
              "WHERE field_pims_l1_estab_unit_code_value = '%s' " .
              "ORDER BY field_pims_staff_surname_value";

          //oupdb("PIMS SQL: $pims_query;");
          $pims_result = db_query($pims_query, $unit_id);
          $a_pims_staff_ids = array();
          while ($pims_data = db_fetch_object($pims_result)) {
            array_push($a_pims_staff_ids, $pims_data->field_pims_staff_id_value);
          }

          $pims_staff_ids = implode(",", $a_pims_staff_ids);
          //$profile_query = "SELECT n.title, n.nid, n.uid FROM node AS n, content_type_profile AS p WHERE n.nid=p.nid AND p.field_oup_staff_id_value IN (" . $pims_staff_ids . ")";
          $profile_query  = "SELECT n.title, n.nid, n.uid, pi.field_pims_staff_surname_value, ";
          $profile_query .= "pi.field_pims_pref_surname_value, pi.field_pims_staff_forenames_value,";
          $profile_query .= "pi.field_pims_pref_forenames_value, pi.field_pims_staff_title_value ";
          $profile_query .= "FROM node AS n, content_type_profile AS pr, content_type_pims AS pi ";
          $profile_query .= "WHERE n.nid=pr.nid AND pi.field_pims_staff_id_value=pr.field_oup_staff_id_value ";
          $profile_query .= "AND pr.field_oup_staff_id_value IN (" . $pims_staff_ids . ") ";
          $profile_query .= "ORDER BY pi.field_pims_staff_surname_value";
          //oupdb("Profile query: $profile_query;");
          $profile_result = db_query($profile_query);
          //while ($profile_data = db_fetch_object($profile_result)) {
          foreach($profile_result as $profile_data) {
            if ($user->uid <> $profile_data->uid) { // Exlude own profile
              //oupdb ("ADDING:: $profile_data->nid - $profile_data->title");
              $forenames = $profile_data->field_pims_staff_forenames_value;
              if ($profile_data->field_pims_pref_forenames_value && $profile_data->field_pims_pref_forenames_value <>$profile_data->field_pims_staff_forenames_value) {
                $forenames .= " [$profile_data->field_pims_pref_forenames_value]";
              }
              $surname = $profile_data->field_pims_staff_surname_value;
              if ($profile_data->field_pims_pref_surname_value && $profile_data->field_pims_pref_surname_value <> $profile_data->field_pims_staff_surname_value) {
                $surname .= " [$profile_data->field_pims_pref_surname_value]";
              }

              $visibility = ou_profile_lget_profile_visibility($profile_data->nid);
              if ($visibility) {
                $visibility = "&nbsp<span class='oup-visibility-$visibility'>[$visibility]</span>";
              }

              $profile_list .= "<li>" .
                  l($surname . ", " . $forenames, "node/" . $profile_data->nid) . $visibility .
                  "</li>\n";
            }
          }
        }
      }
    }
  }

  if ($your_profile) {
    $node->content['body']['#value'] .= $your_profile;
  }

  // Is the user a member of DRADMIN role?
  //if (in_array('DRADMIN', array_values($user->roles))) {
  // Is the user more than just "authenticated"
  if (count($user->roles) > 1) {

    // Check to see if a unit has been requested via GET
    $unit_id = "";
    if ($_GET['unit']) {
      if (is_numeric($_GET['unit'])) {
        $unit_id = $_GET['unit'];
      }
    }

    // Has a unit been requested to be viewed and do we have permissions?
    if ($unit_id) {

      // Get a list of units
      $query = "SELECT n.title, u.field_unit_code_value FROM {node} AS n, content_type_ou_unit AS u WHERE n.nid=u.nid AND u.field_unit_code_value=:unit_code ORDER by n.title";
      $result = db_query($query, array(":unit_code" => $unit_id));

      //while ($data = db_fetch_object($result)) {
      foreach ($result as $data) {
        $title = $data->title;
      }

      if (in_array("PP" . $unit_id, array_values($user->roles)) ||
          in_array('DRADMIN', array_values($user->roles))
      ) {

        // Wrap the unit list in a div and ul (if it exists)
        $node->content['body'][0]['#markup'] .= "<h2>" . $title . "</h2>";


        $pims_query = "SELECT field_pims_staff_id_value FROM {content_type_pims} WHERE field_pims_l1_estab_unit_code_value=:unit_id ORDER BY field_pims_staff_surname_value";
        $pims_result = db_query($pims_query, array(":unit_id" => $unit_id));
        $a_pims_staff_ids = array();
        //while ($pims_data = db_fetch_object($pims_result)) {
        foreach ($pims_result as $pims_data) {
          array_push($a_pims_staff_ids, $pims_data->field_pims_staff_id_value);
        }

        if (count($a_pims_staff_ids)) {
          $pims_staff_ids = implode(",", $a_pims_staff_ids);
          $profile_query  = "SELECT DISTINCT n.title, n.nid, n.uid, pi.field_pims_staff_surname_value, ";
          $profile_query .= "pi.field_pims_pref_surname_value, pi.field_pims_staff_forenames_value,";
          $profile_query .= "pi.field_pims_pref_forenames_value, pi.field_pims_staff_title_value ";
          $profile_query .= "FROM node AS n, content_type_profile AS pr, content_type_pims AS pi ";
          $profile_query .= "WHERE n.nid=pr.nid AND pi.field_pims_staff_id_value=pr.field_oup_staff_id_value ";
          $profile_query .= "AND pr.field_oup_staff_id_value IN (" . $pims_staff_ids . ") ";
          $profile_query .= "ORDER BY pi.field_pims_staff_surname_value";

          $profile_result = db_query($profile_query);
          $group_list = "";

          //while ($profile_data = db_fetch_object($profile_result)) {
          foreach ($profile_result as $profile_data) {
            $forenames = $profile_data->field_pims_staff_forenames_value;
            if ($profile_data->field_pims_pref_forenames_value && $profile_data->field_pims_pref_forenames_value <>$profile_data->field_pims_staff_forenames_value) {
              $forenames .= " [$profile_data->field_pims_pref_forenames_value]";
            }
            $surname = $profile_data->field_pims_staff_surname_value;
            if ($profile_data->field_pims_pref_surname_value && $profile_data->field_pims_pref_surname_value <> $profile_data->field_pims_staff_surname_value) {
              $surname .= " [$profile_data->field_pims_pref_surname_value]";
            }
            $visibility = ou_profile_lget_profile_visibility($profile_data->nid);
            if ($visibility) {
              $visibility = "&nbsp; <span style='color:" . $a_colour[$visibility] . "'>[$visibility]</span>";
            }
            $group_list .= "<li>" .
                l($surname . ", " . $forenames, "node/" . $profile_data->nid)
                . $visibility .
                "</li>\n";

            // Fix for profiles with title set to "This profile has not yet been published"
            if ($profile_data->title == "This profile has not yet been published") {
              if ($profile_data->field_pims_pref_forenames_value) {
                $forenames = $profile_data->field_pims_pref_forenames_value;
              }
              else {
                $forenames = $profile_data->field_pims_staff_forenames_value;
              }

              if ($profile_data->field_pims_pref_surname_value) {
                $surname = $profile_data->field_pims_pref_surname_value;
              }
              else {
                $surname = $profile_data->field_pims_staff_surname_value;
              }

              $title = "";
              if ($profile_data->field_pims_staff_title_value) {
                $title .= $profile_data->field_pims_staff_title_value . " ";
              }
              $title .= "$forenames $surname";
              $tmp_node = node_load($profile_data->nid, NULL, TRUE);
              $tmp_node->title = $title;
              node_save($tmp_node);
              node_load(NULL, NULL, TRUE); // keep the cache empty - any deleted nodes will be cleared from memory
              unset($tmp_node);
            }
          }
        }
        else {
          $group_list .= "<p>There are no profiles for $unit_title.</p>\n";
        }
      }
      else {
        $node->content['body'][0]['#markup'] .= "<h2>You dont have permissions to manage " . $title . "</h2>\n";

        if ($profile_list) {
          $node->content['body'][0]['#markup'] .= "<h2>Other profiles you can edit</h2>\n";
          $node->content['body'][0]['#markup'] .= "<ul>\n" . $profile_list . "</ul>\n";
        }
      }
    }
  }



  if ($group_list) {
    $node->content['body'][0]['#markup'] .= "<h3>$unit_title\n</h3>";
    $node->content['body'][0]['#markup'] .= "<ul>\n";
    $node->content['body'][0]['#markup'] .= $group_list;
    $node->content['body'][0]['#markup'] .= "</ul>\n";
  }

}

///////////////////////////// END VIEW NODES /////////////////////////////////////////////

function ou_profile_node_prepare($node) {
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  ou_profile_log("ou_profile_node_prepare");

  if ($node->type == "profile") {  // Add link back to staff self service
    $message = '<div style="width:100%; height: 2em; line-height:2em;"><div style="width:29%; text-align:left; float:left;">&lArr; <a href="https://msds.open.ac.uk/sss/index.aspx?">EDIT YOUR PIMS DATA</a></div>';
    drupal_set_message(check_plain($message));
  }
}





function _ou_profile_strip_private_fields(&$node, $field_name, $a_field_meta, &$a_ou_profile, $profile, $site_visibility) {

  // Unpack the relevant data from the array
  $a_profile_data = $profile['ou_profile_data'];
  $a_privacy_values = $profile['privacy_values'];
  $a_pims_data = $profile['pims_data'];
  $value = NULL;

  $NID = $profile['pims_data']['nid'];
  $VID = $profile['pims_data']['vid'];

  if (preg_match("/^field_oup_/", $field_name)) {
    $privacy_field = preg_replace("/^field_oup_/", "field_prv_", $field_name);
    $value = $profile['ou_profile_data'][$field_name];
  }
  elseif (preg_match("/^field_pdat_/", $field_name)) {
    // Field is a PIMS profile place-holder (field_pdat_)
    $privacy_field = preg_replace("/^field_pdat_/", "field_pprv_", $field_name);
    $value = $profile['ou_profile_data'][$field_name];
  }
  elseif (preg_match("/^field_pims_/", $field_name)) {
    $privacy_field = preg_replace("/^field_pims_/", "field_pprv_", $field_name);
    $value = $profile['pims_data'][$field_name];
  }
  else // Nothing to do here
    return;

  $field_privacy_value = 3; // Default to Private / not shown if not set
  if (!empty($a_profile_data[$privacy_field]) &&
      isset($a_privacy_values[$a_profile_data[$privacy_field][$a_profile_data['language']][0]['nid']])) {
    $field_privacy_value = $a_privacy_values[$a_profile_data[$privacy_field][$a_profile_data['language']][0]['nid']];
  }

//   $a_ou_profile[$field_name]['type'] = $a_field_meta['type'];
//   $a_ou_profile[$field_name]['label'] = $a_field_meta['label'];
//   $a_ou_profile[$field_name]['widget_type'] = $a_field_meta['widget_type'];
//   $a_ou_profile[$field_name]['group_name'] = $a_field_meta['group_name'];
//   $a_ou_profile[$field_name]['weight'] = $a_field_meta['weight'];

  $a_ou_profile[$field_name] = $a_field_meta;

  if (!empty($a_field_meta['multiple']) && $a_field_meta['multiple'] == 1) {
    // Multi instance field
    $a_ou_profile[$field_name]['multi'] = 1;

    // Add data if privacy settings allow
    if ((int) $field_privacy_value >= (int) $site_visibility) {
      $table_name = "content_" . $field_name;
      $a_field_data = ou_profile_lget_multi_field_data($table_name, $NID);
      $a_ou_profile[$field_name]['value'] = $a_field_data;
    }
    else {
      $a_ou_profile[$field_name]['value'] = "";
    }
  }
  else {
    // Single instance field
    $a_ou_profile[$field_name]['multi'] = 0;

    // Add data if privacy settings allow
    if ((int) $field_privacy_value >= (int) $site_visibility) {
      if (isset($value)) {
        $a_ou_profile[$field_name]['value'] = $value;
      }

//       // File fields -  get the path, else get the data value
//       if ($a_ou_profile[$field_name]['type'] == "filefield") {
//         $file_info = ou_profile_lget_file_info($a_profile_data[$field_name . "_fid"]);
//         if (isset($file_info))
//           $a_ou_profile[$field_name]['value'] = $file_info->filepath;
//       } // Link fields
//       elseif ($a_ou_profile[$field_name]['type'] == "link") {
//         $a_link_info = array();
//         $a_link_info['url'] = $a_profile_data[$field_name . "_url"];
//         $a_link_info['title'] = $a_profile_data[$field_name . "_title"];
//         $a_link_info['attributes'] = $a_profile_data[$field_name . "_attributes"];
//         $a_ou_profile[$field_name]['value'] = $a_link_info;
//       }
//       elseif ($a_ou_profile[$field_name]['type'] == "email") {
//         // Email fields
//         $a_ou_profile[$field_name]['value'] = $a_profile_data[$field_name . "_email"];
//       }
//       else {
//         // Text fields
//         if (preg_match("/^field_oup_/", $field_name)) {
//           // This is a profile field, so fill with profile data
//           $a_ou_profile[$field_name]['value'] = $a_profile_data[$field_name . "_value"];
//         }
//         else {
//           // This is a PIMS placeholder field "field_pdat_*"
//           $pims_field_name = preg_replace("/^field_pdat_/", "field_pims_", $field_name) . "_value";
//           $a_ou_profile[$field_name]['value'] = $a_pims_data[$pims_field_name];
//         }
//       }
    }
    else {
      $a_ou_profile[$field_name] = "";
      if ($field_name != 'field_oup_staff_id')
        unset($node->$field_name);
    }

    unset ($node->$privacy_field);
  }
}

/**
* Implementation of hook_form_alter().
*/
function ou_profile_form_alter(&$form, $form_state, $form_id) {

  // We only want to alter the edit page.
  if ($form_id != 'profile_node_form')
    return;

  drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');
  //drupal_add_js(drupal_get_path('module', 'ou_profile') . '/includes/jquery-1.6.2.min.js');
  //jquery_ui_add('jquery.ui.all');
  drupal_add_js(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_scripts.js');

  if ($form_id == "profile_node_form") {
    $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
    $site_name = variable_get('site_name', 0);
    require_once "$INCLUDES/local_functions.inc";


    // Add some helper text about PIMS
    //<a href="https://msds.open.ac.uk/sss/index.aspx?">EDIT YOUR PIMS DATA</a></div>';
    $elem = t('<a href="@url">Edit your PIMS data</a>', array('@url' => url('https://msds.open.ac.uk/sss/index.aspx')));


    // Refer to the form validation function below
    $form['#validate'] = array('ou_profile_form_validate');

    // Refer to the form submission function below
    $form['#submit'] = array('ou_profile_form_submit');

    //$form['title']['//default_value'] = "ABCDE";
    //$form['#node']->title = "ABCDE";
    //$form['title'] = "ABCDE";

    //$staff_id = $form['#node']->field_oup_staff_id[0]['value'];
    $staff_id = ou_profile_node_get_field_value($form['#node'], 'field_oup_staff_id');
    if (!$staff_id)
      return;

    // Add PIMS data to the related PIMS data placeholder (field_pdat_*) in the profile content
    $a_pims_data = ou_profile_lget_pims_data(0, $staff_id);
    foreach ($form['#node'] as $key => $val) {
      if (preg_match("/^field_pdat_/", $key)) {
        $pims_field_name = preg_replace("/^field_pdat_/", "field_pims_", $key);
        $form[$key][0]['#default_value']['value'] = $a_pims_data[$pims_field_name];
      }
    }

    // Add call back to allow making some fields read-only
    if (isset($form['type']) && isset($form['#node'])) {
      $form['#after_build'][] = '_ou_profile_after_build';
    }

//    $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {content_type_pims} WHERE ';
//    $query .= 'field_pims_staff_id_value = :staff_id';
//    $unit_code = db_query($query, array ( ":staff_id" => $staff_id ))->fetchField();


    $query = db_select('field_data_field_pims_l1_estab_unit_code', 'l1_units');
    $query->addField('l1_units', 'field_pims_l1_estab_unit_code_value', 'pims_l1_estab_unit_code');
    $query->condition('l1_units.entity_id', $form['#node']->nid, '=');

    $unit_code = $query->execute()->fetchField();


    //if (!$unit_code) { return; }

    // Prevent the field group group_oubs from being displayed.
    //unset($form['group_oubs']);
    $a_field_groups = array();

    // get a list of field groups in the form - the last 4 digits of the
    // field group name is the Level 1 establishing unit of the person.
    // Thus we get a list of field groups and determine whether to show
    // the fields in that field group.
    // But allow for general groups which don't have unit codes in them
    foreach ($form as $key => $val) {
      if (preg_match("/^group_oup_/", $key)) {
        $fg_unit_code = substr($key, -4);
        if ($fg_unit_code != $unit_code && is_numeric($fg_unit_code)) {
          // Hide the field group if the person is not in the unit / department
          // the field group belongs to.
          unset($form[$key]);
        }
      }
    }

    // Prevent the field "Staff ID", OUCU and "Title" from being displayed.
    unset($form['field_oup_staff_id']);
    unset($form['field_oup_surname']);
    unset($form['field_oup_staff_category']);
    unset($form['field_oup_academic_centre']);
    unset($form['field_oup_oucu']);
    unset($form['title']);

    // Remove any PIMS data placeholders from the form - these are filled automatically by the module when viewing
    // TODO: This bit throws out errors
    foreach ($form as $key => $val) {
      if (preg_match("/^field_pdat_/", $key)) {
        unset($form[$key]);
      }
      if (preg_match("/^group_/", $key)) {
          foreach ($val as $field2 => $val2) {
          if (preg_match("/^field_pdat_/", $field2)) {
            unset($form[$key][$field2]);
          }
        }
      }
    }
    //ou_profile_form_set_readonly($form['field_pdat_appt_job_title']);



    // Insert PIMS values next to privacy field settings
    $pims_data = ou_profile_lget_pims_data(0, $staff_id);
    foreach ($form as $key => $val) {

      if (preg_match("/^group_/", $key)) {
          foreach ($val as $field2 => $val2) {
          if (preg_match("/^field_pprv_/", $field2)) {
            $current_value = $pims_data[preg_replace("/pprv/", "pims", $field2) . '_value'];
            $style = ' class="pims"';
            if ($current_value) {
               $form[$key][$field2]['#title'] .= "<span $style> - CURRENT VALUE IN PIMS = '" . $current_value . "'</span>";
            }
        else {
               $form[$key][$field2]['#title'] .= "<span $style> - NO CURRENT VALUE IN PIMS</span>";
            }
          }
          }
      }

      if (preg_match("/^field_pprv_/", $key)) {
         $current_value = $pims_data[preg_replace("/pprv/", "pims", $key)];
         $style = ' class="pims"';
         if ($current_value) {
              $form[$key]['und']['#title'] .= "<span $style> - CURRENT VALUE IN PIMS = '" . $current_value[$form['#node']->language][0]['value'] . "'</span>";
         }
        else {
            $form[$key]['und']['#title'] .= "<span $style> - NO CURRENT VALUE IN PIMS</span>";
         }
      }
    }

    // Remove the "name" information as PIMS should determine what a persons name is
    $forced_fields = array(
      "field_pprv_staff_title",
      "field_pprv_staff_forenames",
      "field_pprv_pref_forenames",
      "field_pprv_pref_surname",
      "field_pprv_staff_surname",
      "field_pprv_staff_initials",
    );
    foreach ($form as $key => $val) {
      if (preg_match("/^group_/", $key)) {
        foreach ($val as $field2 => $val2) {
          if (in_array($field2, $forced_fields)) {
            unset($form[$key][$field2]);
          }
        }
      }

      if (in_array($key, $forced_fields)) {
        unset($form[$key]);
      }
    }

  }
  elseif ($form_id == "ou_profile_node_form") {
    $form['field_pims_unique_id']['#access'] = FALSE;
    if (!preg_match("/\-0153/", $form['field_pims_unique_id'][0]['#default_value']['value'])) { // Allow OUBS to repair overwritten titles caused by bug
        $form['title']['#type'] = 'hidden';
    }
  }

  // Force the save button to have a unique ID so that we can skin this one button
  // to make it float.
//  $save_button = $form['buttons']['submit'];
//  $form['buttons']['profile-submit'] = $save_button;
//  unset($form['buttons']['submit']);


  $form['actions']['submit']['#attributes']['class'][] = 'profile-submit';
  unset($form['actions']['preview']);
  unset($form['actions']['delete']);

  return;
}


/** ou_profile_form_validate
 *
 * Author Mark Williams
 *
 * These validations are in addition to those provided with CCK modules
 *
 */
function ou_profile_form_validate(&$form, &$form_state) {
  if ($form_state['values']['form_id'] == "profile_node_form") {

    // Alternative email address must contain open.ac.uk

    if ($form_state['values']['field_oup_alternative_email']['und'][0]['email'] &&
      ! preg_match("/open\.ac\.uk/", $form_state['values']['field_oup_alternative_email']['und'][0]['email'])) {
      form_set_error('field_oup_alternative_email', t('Your alternative email address must contain @open.ac.uk.'));
    }

  }
}

function ou_profile_form_submit($form, &$form_state) {

  // Before submitting, make sure the visibility flag is set to the
  // highest value used from the data

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  // Build a list of nid / privacy values
  $a_privacy_values = ou_profile_lget_privacy_values();

  // An array to link the type of CCK visiblity to the type of profile visibility
  $a_site_visibility = array(
      3 => 2,
      2 => 1,
      1 => 0,
      0 => 0,
  );

  // A variable to store the most public visiblity setting
  $final_visibility = 0;

  // Remove any PIMS data placeholders from the form - these are filled automatically by the module when viewing
  foreach ($form_state['values'] as $key => $val) {

    if (preg_match("/^field_prv_/", $key) || preg_match("/^field_pprv_/", $key)) {
        $item_visibility = $val['und'][0]['nid'];
        if (isset($item_visibility) && $a_privacy_values[$item_visibility] > $final_visibility)
          $final_visibility = $a_privacy_values[$item_visibility];
    }

    if (preg_match("/^group_/", $key)) {
      foreach ($val as $field2 => $val2) {
        if (preg_match("/^field_prv_/", $field2) || preg_match("/^field_pprv_/", $field2)) {
          $item_visibility = $val2[0]['nid'];
            if ($a_privacy_values[$item_visibility] > $final_visibility)
              $final_visibility = $a_privacy_values[$item_visibility];
          }
      }
    }
  }

  $form_state['values']['field_oup_visibility'][0]['value'] = $a_site_visibility[$final_visibility];
}




/**
* Custom after_build callback handler.
*/
function _ou_profile_after_build($form, &$form_state) {
  if ($form['#node']->type == "profile") {
    // Make PIMS placeholders READONLY in the profile form.
    foreach ($form['#node'] as $key => $val) {
      if (preg_match("/^field_pdat_/", $key)) {
        _ou_profile_fix_disabled($form['#node']->{$key});
      }
    }
  }
  return $form;
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function _ou_profile_fix_disabled(&$elements) {


  if (!is_array($elements))
    return;

  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
       // Recurse through all children elements.
      _ou_profile_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes']))
    $elements['#attributes'] = array();

  $elements['#attributes']['disabled'] = 'disabled';

}


function ou_profile_user($op, &$edit, &$account, $category = NULL) {
  global $_ou_profile_server_site_path;

  // When a user logs in, check if they have any profiles. If they do, set the owner
  // of the profile to their UID
  if ($op == "login") {
    $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
    require_once "$INCLUDES/local_functions.inc";

    $site_path = ou_profile_lget_site_path();
    $uid = $account->uid;
    $oucu = $account->name;

    if ($uid>1 && $oucu && ($site_path==$_ou_profile_server_site_path)) {
      ou_profile_lset_profile_owner($oucu, $uid);
    }

  }

}

function ou_profile_preprocess_node(&$vars) {

    // Here is the way to switch to a different node-<something> template based on node properties.
    // We use this so that profile and ou_profile can share the same template file.
  $modulepath = drupal_get_path('module', 'ou_profile');

    if ($vars['type'] == 'profile' || $vars['type'] == 'ou_profile') {

      $hooks = theme_get_registry();
      //print_r($hooks['profile']);

      $vars['template_files'] = array(
            'node-profile',
            'node-' . $vars['nid'] . '-profile');
    }

    return $vars;

}

/* Add our theme directory to the list of places to check for overrides */

// TODO: Rewrite me for D7
function ou_profile_theme_registry_alter(&$theme_registry) {

  // Figure out where our theme directory is
  $modulepath = drupal_get_path('module', 'ou_profile') . '/includes/templates/';

  // work on a copy
  $theme_registry_copy = $theme_registry;

  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $modulepath);

  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // Create a list of templates types we want to override
  $template_types = array('node', 'page', 'block');

  // Add our templates path for all of the types that we to allow overrides for
  foreach ($template_types as $type) {
    //$originalpath = array_shift($theme_registry[$type]['theme paths']);
    //array_unshift($theme_registry[$type]['theme paths'], $originalpath, $modulepath );

    if (is_array($theme_registry[$type]['theme path'])) {
      $first_element = array_shift($theme_registry[$type]['theme path']);
      array_unshift($theme_registry[$type]['theme path'], $first_element, $modulepath);
    }

  }

  //print_r($theme_registry);  die();

   // Modify form_element function so that it uses our module function instead
//   if (!empty($theme_registry['form_element'])) {
//     $theme_registry['form_element']['function'] = 'ou_profile_form_element';
//   }
}


/* TODO: Rewrite me for D7
//==================================
function ou_profile_form_element($element, $value) {
  // This is also used in the installer, pre-database setup.
  $t = get_t();

//preg_match("/^field_oup_/", $key
//preg_match("/^field_pprv_/", $key

$string = $element['//parents'][0];
$patterns = array();
$patterns[0] = '/_oup_/';
$patterns[1] = '/_pprv_/';
$patterns[2] = '/_prv_/';
$replacements = array();
$replacements[2] = '_';
$replacements[1] = '_';
$replacements[0] = '_';
//echo preg_replace($patterns, $replacements, $string);



  //$output = '<div class="form-item"';
//print_r($element);
  $output = '<div class="form-item form-item-p-' . preg_replace($patterns, $replacements, $string) . '"';

if (!empty($element['//id'])) {
    $output .= ' id="' . $element['//id'] . '-wrapper"';
  }
  $output .= ">\n";
  $required = !empty($element['//required']) ? '<span class="form-required" title="' . $t('This field is required.') . '">*</span>' : '';

  if (!empty($element['//title'])) {
    $title = $element['//title'];
    if (!empty($element['//id'])) {
      $output .= ' <label for="' . $element['//id'] . '">' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
    else {
      $output .= ' <label>' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
  }

  $output .= " $value\n";

  if (!empty($element['//description'])) {
    $output .= ' <div class="description">' . $element['//description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}
*/

/**
*
* Implementation of hook_theme()- requires cache to be cleared
*
* Authors: Mark Williams & Paul Dixon
*
* Declare functions for use in themes on profile server or client sites where this module is activated
*
*/
function ou_profile_theme($existing, $type, $theme, $path) {



  $modulepath = drupal_get_path('module', 'ou_profile');

  $retarray =  array(
    'get_profile_nodes' => array(
      'arguments' => array('query' => NULL)
    ),
    'get_profile_node_list' => array(
      'arguments' => array('query' => NULL)
    ),
    'ou_profile_render_xml' => array(
      'template'  => 'ou_profile--xml',
      'path' =>  $modulepath . '/includes/templates/',
      'arguments' => array(
        'title' => NULL,
        'content' => NULL,
        'picture' => NULL,
        'date' => NULL,
        'links' => NULL,
        'name' => NULL,
        'node_url' => NULL,
        'oucu' => NULL,
        'submitted' => NULL,
        'node' => NULL,
        'type' => NULL,
        'nid' => NULL,
        'fields' => NULL,
      ),
    ),
  );

    return $retarray;
}


/**
*
* Author: Mark Williams
*
* Return local nodes on client website based on query of full profile and PIMS nodes on profile server
* Do this by getting all unique ids for selected PIMS nodes on the profile server and then
* using these unique ids to get local nodes
*
*/
function ou_profile_get_profile_nodes($query = NULL, $type = NULL) {

  global $_ou_profile_server_site_path;



  if (preg_match("/;/", $query)) {
    return;
  }
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  $a_site_info = ou_profile_lget_site_info();
  $site_path = ou_profile_lget_site_path();
  $unit_code = $a_site_info['unit_code'];

  ou_profile_log("Unit code = " . $unit_code);
  ou_profile_log("query = " . $query);
  ou_profile_log("type = " . $type);
  //if (($site_path != $_ou_profile_server_site_path) && (!$unit_code))
  //if (!$unit_code)
  //  return;

  // Set database to profiles
  db_set_active('profiles');

  // This needs to stay as an old-school select for parameters to be passed to it
  $server_query = "SELECT field_pims_unique_id_value, field_pims_pref_surname_value, field_pims_staff_surname_value ";
  $server_query .= ", CONCAT_WS(',',field_pims_pref_surname_value, field_pims_staff_surname_value) AS ordername ";
  $server_query .= "FROM content_type_pims ";
  $server_query .= "WHERE ";
  if ($query) {
    $server_query .= $query . " ";
  }
  else { // no query specified so all results will be returned
    $server_query .= " 1 ";
  }
  if ($unit_code)
    $server_query .= "AND field_pims_l1_estab_unit_code_value=" . $unit_code . " "; // only return results for unit
  $server_query .= "AND field_pims_staff_id_value IN ";
  $server_query .= "(SELECT field_oup_staff_id_value FROM content_type_profile WHERE field_oup_visibility_value= " .
    (((int)$a_site_info['visibility'])-1) . ")"; // only return visible profiles!
  $server_query .= " ORDER BY ordername ASC"; // order by preferred surname or surname if preferred surname is not set

    ou_profile_log("server_query = " . $server_query);

  //debug print $server_query;

  $server_result = db_query($server_query);
  $staff_ids = array();
  //while ($pims_data = db_fetch_object($server_result)) {
  foreach ($server_result as $pims_data) {
    $staff_ids[$pims_data->field_pims_unique_id_value]['surname'] = $pims_data->field_pims_staff_surname_value;
    $staff_ids[$pims_data->field_pims_unique_id_value]['pref_surname'] = $pims_data->field_pims_pref_surname_value;
  }

  // Set database back to original and query client website to get local, matching profiles
  db_set_active('default');

  $client_profiles = array();

  $INLIST = "";
  foreach ($staff_ids as $staff_id => $staff_data) { // loop over staff ids and get local nodes on client website
     $INLIST .= "'" . $staff_id . "',";
  }

  $unordered_client_profiles = array();
  if ($INLIST) {
     $INLIST = rtrim($INLIST, ",");
     if ($site_path != $_ou_profile_server_site_path) {
       // TODO: Rewrite me as db_query array
     /*  $client_query = "SELECT node.nid, node.title, content_type_ou_profile.field_pims_unique_id_value as staff_id FROM {node}, {content_type_ou_profile} ";
       $client_query .= "WHERE ";
       $client_query .= "node.type in ('ou_profile') AND node.status='1' ";
       $client_query .= "AND node.nid=content_type_ou_profile.nid ";
       $client_query .= "AND content_type_ou_profile.field_pims_unique_id_value IN (" . $INLIST . ") "; // N.B. 'ORDER BY find_in_set(staff_id, $INLIST)' cannot be used here as all profiles may not be on client server
     */
      $client_query = "SELECT node.nid, node.title, field_data_field_pims_unique_id.field_pims_unique_id_value as staff_id " .
          "FROM {node}, {field_data_field_pims_unique_id} " .
          "WHERE " .
          "node.type in ('ou_profile') " .
          "AND node.status = 1 " .
          "AND node.nid = field_data_field_pims_unique_id.entity_id " .
          "AND field_data_field_pims_unique_id.field_pims_unique_id_value IN (" . $INLIST . ")";
          // N.B. 'ORDER BY find_in_set(staff_id, $INLIST)' cannot be used here as all profiles may not be on client server
    }
    else {
      // TODO: Rewrite me as db_query array
      $client_query = "SELECT node.nid, node.title, content_type_pims.field_pims_unique_id_value as staff_id FROM {node}, {content_type_pims} ";
      $client_query .= "WHERE ";
       $client_query .= "node.type in ('pims') AND node.status='1' ";
       $client_query .= "AND node.nid=content_type_pims.nid ";
       $client_query .= "AND content_type_pims.field_pims_unique_id_value IN (" . $INLIST . ") "; // N.B. 'ORDER BY find_in_set(staff_id, $INLIST)' cannot be used here as all profiles may not be on client server

    }

    ou_profile_log("client query = " . $client_query);

    $client_result = db_query($client_query);

    //while ($profile = db_fetch_array($client_result)) {
    foreach ($client_result as $profile) {
      if ($type == "list") {
      ou_profile_log("creating list item for - " . $profile['title']);
              $unordered_client_profiles[$profile['staff_id']] = l($profile['title'], "node/" . $profile['nid']); // Drupal function to return well-formed link to node
      }
      else {
       $unordered_client_profiles[$profile->staff_id] = $profile->nid;
      }
    }
  }
  else
     return;

  ou_profile_log("re-ordering data");
  foreach ($staff_ids as $staff_id => $staff_data) { // reorder the unordered client profiles to restore surname order
      if ($unordered_client_profiles[$staff_id]) {
    // If we were asked for an array, we pass back the staff_data array
    if ($type == "array")
      $client_profiles[$unordered_client_profiles[$staff_id]] = $staff_data;
    else // Otherwise we just pass back the nid so they can do thier own processing
      $client_profiles[] = $unordered_client_profiles[$staff_id];
      }
  }

  ou_profile_log("returning profiles");
    return $client_profiles;
}

/**
*
* Author: Mark Williams
*
* Return a list of local nodes on client website based on query of full profile and PIMS nodes on profile server
* in the form of a nice HTML list of links or an array of node ids
*
*/
function theme_get_profile_node_list($query = NULL, $type = "array") {
  $staff_nodes = ou_profile_get_profile_nodes($query, $type);
  if ($type == "list") {
    $staff_list = "";
    if (is_array($staff_nodes)) {
      foreach ($staff_nodes as $staff_node) {
         $staff_list .= "<li>" . $staff_node . "</li>\n";
      }
    }
    if ($staff_list) {
       $staff_list = "<ul>\n" . $staff_list . "</ul>";
    }
    else {
       $staff_list = "<p>No results found for query: $query</p>";
    }
    return $staff_list;
  }
  else {
    if (count($staff_nodes)) {
          return $staff_nodes;
    }
    else {
          return "<p>No results found for query: $query</p>";
    }
       }
}

/**
*
* Author: Mark Williams
*
* Return an array of expertise keywords for the client website's unit
*
*/
function theme_get_expertise_tags() {

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  $a_site_info = ou_profile_lget_site_info();
  $unit_code = $a_site_info['unit_code'];
  $site_visibility = (int) $a_site_info['visibility'];

  // Set database to profiles
  db_set_active('profiles');

  // TODO: Rewrite me as db_query array
  $sql_query = "SELECT DISTINCT field_oup_expertise_value ";
  $sql_query .= "FROM {content_type_profile}, {content_type_pims}, {content_field_oup_expertise}, {content_type_privacy_value} ";
  $sql_query .= "WHERE content_field_oup_expertise.nid = content_type_profile.nid ";
  $sql_query .= "AND content_type_profile.field_oup_staff_id_value=content_type_pims.field_pims_staff_id_value ";
  $sql_query .= "AND content_type_profile.field_prv_expertise_nid=content_type_privacy_value.nid ";
  $sql_query .= "AND content_type_privacy_value.field_privacy_value_value>=" . $site_visibility . " ";
  $sql_query .= "AND content_type_pims.field_pims_l1_estab_unit_code_value=" . $unit_code . " ";
  $sql_query .= "AND content_field_oup_expertise.field_oup_expertise_value IS NOT NULL ";

  $sql_result = db_query($sql_query);

  $tags = array();
  while ($row = $sql_result->fetchObject()) {
    $tags[] = $row->field_oup_expertise_value;
  }

  db_set_active('default');

  return $tags;
}

/**
 * Create custom meta-tags using nodewords API
 *
 */
function ou_profile_nodewords_tags_alter(&$tags, $parameters) {
  if ($GLOBALS['oup_meta_description']) {
    $tags['description'] = $GLOBALS['oup_meta_description'];
  }
}

/**
*
* Author: Paul Conolly
*
* Implemetation of hook_action_info()
* To trigger cURL call to http://data.open.ac.uk/update/person/oucu where oucu represents value stored in oucu field
*
* If these need removing visit admin/settings/actions/orphan on the sites that were using the actions
*/
/*
function ou_profile_action_info() {
  return array(
    'ou_profile_oucu_action' => array(
      'description' => t('update OU RDF data'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('delete', 'insert', 'update'),
        ),
      ),
    );
}
*/
/*
*
* Implemtation of drupal action
* Calls cURL action
*
*
*/
/*
function ou_profile_oucu_action(&$object, $context = array()) {

    ou_profile_log("object->type = " . $object->type . " | nid = " . $object->nid);

  if ($object->type == 'profile') {  // oucu is unset so we need to go and get it from the content type data set.
    db_set_active('default');
    $oucu = db_result(db_query("SELECT field_oup_oucu_value FROM {content_type_profile} WHERE nid = %d", $object->nid));
  }
  elseif (!empty($object->field_pims_oucu[0]['value'])) {
    $oucu = empty($object->field_pims_oucu[0]['value']); // if there's an OUCU value use it.
  }

  ou_profile_log("oucu = " . $oucu);
  if (!empty($oucu)) {

    //$_curl = 'http://www8-rosella.open.ac.uk/about/main/'.$oucu; // look at \\rosella\log\www8openacuk-access_log to see this
    $_curl = 'http://data.open.ac.uk/page/update/person/' . $oucu;
    ou_profile_log("calling = " . $_curl);
    drupal_http_request($_curl);
  }
}
*/

/**
 * Implements hook_permission().
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the module
 */

function ou_profile_permission() {
  return array('administer data load');
} // function edrm_perm()

/**
* Implementation of hook_menu().
*/

function ou_profile_menu() {

 $items = array();

  $items['xml/%'] = array(
   'title' => 'xml',
   'page callback' => 'ou_profile_render_xml',
   'page arguments' => array(1),
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
   );

  // This is the behind the scenes config (which directories to use, debug levels, etc)
  $items['admin/config/system/ou_profile'] = array(
      'title' => 'OU Profile Settings',
      'description' => 'Import OU Profile content now.',
      'page callback' => 'ou_profile_config',
      'access arguments' => array('administer data load'),
      //'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}


function ou_profile_render_xml($oucu) {

  $nid = db_result(db_query("SELECT SUBSTRING(src,6,9) AS nid FROM {url_alias} WHERE dst = '%s'", $oucu));
  $node = node_load(array('nid' => $nid));
    node_invoke_nodeapi($node, 'rdf');

    ou_profile_log("nid = " . $nid);

  $fields=array();
  $fields["fullname"] = $node->{"fullname"}[0]['value'];
  $result=db_query("SELECT field_name FROM {content_node_field}  ");
  while ($row = db_fetch_array($result)) {
    ou_profile_log("found field = " . $row['field_name']);
    if ((substr($row['field_name'], 0, 10) != 'field_prv_') && (substr($row['field_name'], 0, 11) != 'field_pprv_')) {

      if (!empty($node->{$row['field_name']})) {

        foreach ($node->{$row['field_name']} as $key => $value) {
          ou_profile_log("adding field = " . $row['field_name']);
          $fields[$row['field_name']] = $node->{$row['field_name']};
        }
      }
    } // end of prv test

  } // end of fields loop

  ou_profile_log("launching renderer");
  return theme('ou_profile_render_xml',
      $node->title, $node->content, $node->picture, $node->date,
      $node->links, $node->name, $node->path, $node->field_oup_oucu[0]['value'],
      $node->submitted, $node, $node->type, $node->nid, $fields);
}



function ou_profile_render_content_as_xml($in_key, $in_value) {

  // Set up the variables that we'll use to return data
  $node_start = "";
  $node_content = "";
  $node_end = "";

  ou_profile_log("XML key = " . $in_key);

  // If the key was set to empty, make sure we dont render a tag for it.
  if ($in_key != "") {
    $node_start = "<" . $in_key . ">\n";
    $node_end = "</" . $in_key . ">\n";
  }

  // If we are an array, recurse to create more xml nodes
  if (is_array($in_value)) {

    foreach ($in_value as $key => $value) {

      // The next bit is to hide the arrays that only have one element,
      // the data will just sit under the parent node

      // Default to whatever the array key name is
      $node_name = $key;
      if (is_int($key)) {
        if (count($in_value) > 1) // If theres lots of stuff in this array, add _data to the end
          $node_name = $in_key . "_data";
        elseif (count($in_value) == 1) // If theres only one item in the array, dont add the key as a node element
          $node_name = "";
      }

      // Because we are an array, repeat this function for all children.
      $node_content .= ou_profile_render_content_as_xml($node_name, $value);
    }
  }
  else
    $node_content = $in_value;

  return $node_start . $node_content . $node_end;
}

function ou_profile_block_info() {
  $blocks['_unit_list'] = array(
      'info' => t("People PIMS Units List"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'region2',
      'pages' => 'my-profile',
  );
  $blocks['_people_search']= array(
      'info' => t("People search box"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
  );
  $blocks['_people_az']= array(
      'info' => t("People A-Z"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
  );

  return $blocks;
}

function ou_profile_block_view($delta = '') {

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/block_functions.inc";

  switch ($delta) {
    case '_unit_list': // PIMS Units List
    $block = ou_profile_get_unit_list_block();
      break;
    case '_people_search': // People search box
    $block = ou_profile_get_people_search_block();
      break;
    case '_people_az': // People A-Z
    $block = ou_profile_get_people_list_block();
      break;
  }

  // Make sure the css is loaded to style the blocks correctly.
  if (!empty($block)) {
    $block['content']['#attached']['css'][] = drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css';
  }

  return $block;
}

/* List all available units on right of page */
function ou_profile_block($op='list', $delta = 0) {

  // listing of blocks, such as on the admin/block page
  if ($op == "list") {
           // This list should only be visible to admins, but theres
              // no way to code that as a default. Anyone creating a profile server will
              // have to do this manually.

    $blocks['_unit_list'] = array(
      'info' => t("People PIMS Units List"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'region2',
      'pages' => 'my-profile',
    );
    $blocks['_people_search']= array(
      'info' => t("People search box"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
    );
    $blocks['_people_az']= array(
      'info' => t("People A-Z"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
    );

    return $blocks;
  }
  elseif ($op == 'view') {

    // Make sure the css is loaded to style the blocks correctly.
    drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');

    $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
    require_once "$INCLUDES/block_functions.inc";

    switch ($delta) {

      case '_unit_list': // PIMS Units List
        $block = ou_profile_get_unit_list_block();
        break;
      case '_people_search': // People search box
        $block = ou_profile_get_people_search_block();
        break;
      case '_people_az': // People A-Z
        $block = ou_profile_get_people_list_block();
        break;
   }

    return $block;
  }
}

// Provide a way to automate the URL generation, rather than forcing the path
function ou_profile_token_list($type = 'all') {
  $tokens = array();

  if ($type == 'node' || $type == 'all') {
      $tokens['node']['ou_profile-oucu'] = t("The OUCU as understood by the profile module");
  }

  return $tokens;
}

function ou_profile_token_values($type, $object = NULL, $options = array()) {
    $values = array();

    if ($type == 'node' && !empty($object)) {
        $node = node_load($object->nid);
        $values['ou_profile-oucu'] = $node->field_oup_oucu[0]['value'];
        unset($node);
    }

    return $values;
}




function ou_profile_config() {
  $form = drupal_get_form('ou_profile_config_form');
  return t('OU Profile Import') . drupal_render($form);
}

/**
 * Builds the form to allow users to configure where the EDRM module should look for content
 * @param unknown_type $form_state
 */
function ou_profile_config_form($form_state) {

  $form['submit']=array('#type' => 'submit',
      '#value' => t('Refresh now'));

  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function ou_profile_config_form_submit($form, &$form_state) {

$INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  watchdog("ou_profile", "Starting cron");

  $CLIENT = 0;
  $SERVER = 0;

  if (node_type_get_type("ou_profile")) {
    $CLIENT = 1;
  }

  if (node_type_get_type("profile")) {
    $SERVER = 1;
  }

  global $user, $user_is_admin, $staff_id, $_ou_profile_server_site_path;

  // Prepare the required values
  $p = ou_profile_node_api_params();
  if ($p['site_path'] == $_ou_profile_server_site_path)
    $SERVER = TRUE;

  if ($SERVER) { // run cron for server and OUBS reporting
    watchdog("ou_profile", "Running server cron");
    include "cron/server_cron.inc";
  }
  else {   // site is allowed to access the profiles system
    watchdog("ou_profile", "Running client cron");
    include "cron/client_cron.inc"; // run cron for client including OUBS reporting
  }

  // Tell the user
  drupal_set_message(t('Data Reloaded'));

}

// function bt()
// {
//    array_walk( debug_backtrace(), create_function( '$a,$b', 'print "<br /><b>" . basename( $a[\'file\'] ). "</b> &nbsp; <font color=\"red\">{$a[\'line\']}</font> &nbsp; <font color=\"green\">{$a[\'function\']} ()</font> &nbsp; -- " . dirname( $a[\'file\'] ). "/";' ) );
// }

/*
* SERVICES Implementation
*/

/**
 * Implements hook_services_resources().
 */
function ou_profile_services_resources() {
  return array(
    'ou_profile_test' => array(
      'retrieve' => array(
        'callback' => '_ou_profile_resource_retrieve',
        'args' => array(
          array(
            'name' => 'arg1',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'ou_profile Test argument 1.',
          ),
        ),
        'access callback' => '_ou_profile_resource_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      ),
    ),
  );
}

/**
 * CRUD retrieve callback.
 */
function _ou_profile_resource_retrieve($arg1) {
  //return 'CRUD Retrieve ' . $arg1;

  $query = 'SELECT entity_id FROM {field_data_field_oup_staff_id} WHERE field_oup_staff_id_value=\'' . $arg1 . '\'';
  $nid = db_query($query)->fetchField();

  // Load the node
  $node = node_load($nid, NULL, FALSE);
  // Run it in view mode (to remove any private fields)
  ou_profile_node_view($node, "full", "en");

  return $node->ou_profile;
}

/**
 * Access callback.
 */
function _ou_profile_resource_access($op) {
  return TRUE;
}
