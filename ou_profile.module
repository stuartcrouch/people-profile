<?php

ini_set('display_errors', 1);
error_reporting(E_ALL ^ E_NOTICE);


/**
 * Authors Paul Dixon and Mark Williams
 * Updated by Stuart Crouch
 * Updated by Sirnjeet Kalwan, Nov 2013
 *
 */

$module_path = drupal_get_path('module', 'ou_profile');

// Include the local functions so that we can call the log command
require_once $module_path.'/includes/local_functions.inc';

//pims import functions
require_once $module_path.'/ou_profile.import.pims.inc';

//Admin form & processing
require_once $module_path.'/ou_profile.admin.inc';

/**
 * 22-8-11 Author: Lee Austin
 *
 * Function to restructure an array based on a field
 */
function ou_profile_make_group_relations(&$inArray, &$outArray) {
  if (!is_array($inArray)) {
      return;
  }

  if (!is_array($outArray)) {
    return;
  }
  
  // TODO: We should really figure out how to make this recursive, at present you only get 1 level of depth
  
  foreach ($inArray as $key => $data) {
    if (isset($data['group_name'])) {
      if (isset($data['parent_name'])) {
        $outArray[$data['parent_name']][$data['group_name']][$key] = $data;
      }
      else {
        $outArray[$data['group_name']][$key] = $data;
      }
    } else {
      $outArray[$key] = $data;
    }
  }
}

/**
 * Implementation of hook_cron().
 *
 * Run the appropriate cron job for each OU website that uses this module
 * Notes:
 * 1, Client cron checks the database of allowed sites so no need to check here
 * 2, OUBS reporting keeps its own copies of PIMS data so needs to run client and server crons
 * 3, Run the server cron before the client cron on OUBS reporting
 *
 
function ou_profile_cron() {
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  watchdog("ou_profile", "Running server cron");
  include "cron/server_cron.inc";

}
 */

///////////////////////////////////
// NEW NODE API FUNCTIONS
///////////////////////////////////
$user_is_admin = FALSE;
$staff_id = NULL;
$oucu = NULL;

function ou_profile_load_node_info($unit_code, $node) {

watchdog( "ou_profile", "ou_profile_load_node_info" );
  global $user, $user_is_admin, $staff_id;
  // Is the user an admin for this node?
  if ($user->uid) {
    $user_is_admin = ou_profile_lview_permission($unit_code, $node->uid); // returns TRUE or FALSE
  }
  else {
    $user_is_admin = FALSE;
  }

  $a_privacy_values = ou_profile_lget_privacy_values();
}


function ou_profile_node_api_params() {
  $p = array();
  $p['a_site_info'] = ou_profile_lget_site_info();
  $p['site_name'] = variable_get('site_name', 0);
  $p['site_allowed'] = ou_profile_lsite_allowed();
  $p['site_path'] = ou_profile_lget_site_path();
  $p['unit_code'] = $p['a_site_info']['unit_code'];
  $p['site_visibility'] = (int) $p['a_site_info']['visibility'];

  return $p;
}


/////////////////////////////////////////////// VIEW NODES //////////////////////////////////////////////


function ou_profile_node_view($node, $view_mode, $langcode) {
watchdog( "ou_profile", "ou_profile_node_view" );

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  ou_profile_log("ou_profile_node_view");

  drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');


  switch ($node->type) {
    case "profile":
      ou_profile_node_view_profile($node, $view_mode, $langcode);
      break;
    case "ou_profile":
      ou_profile_node_view_ou_profile($node, $view_mode, $langcode);
      break;
    case "profile_page":
      ou_profile_node_view_profile_page($node, $view_mode, $langcode);
      break;
  }


}


function ou_profile_node_view_profile($node, $view_mode, $langcode) {
  watchdog( "ou_profile", "ou_profile_node_view_profile");
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  

  $p = ou_profile_node_api_params();
  $staff_id = ou_profile_node_get_field_value($node, 'field_oup_staff_id');

  db_set_active('profiles');

  $query = 'SELECT entity_id from {field_data_field_pims_staff_id} WHERE field_pims_staff_id_value = ' . $staff_id;
  $pims_entity_id = db_query($query)->fetchField();
  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {field_data_field_pims_l1_estab_unit_code} WHERE entity_id = ' . $pims_entity_id;
  $unit_code = db_query($query)->fetchField();

  db_set_active();

  // Add in any PIMS data exposed by privacy values to the related PIMS data placeholder "field_pdat_*" in the profile content
  // Don't do this if the profile is being edited.
  //$a_pims_data = ou_profile_lget_pims_data($unit_code, $staff_id);

  global $user, $user_is_admin, $staff_id;


  // Prepare the required values
  $p = ou_profile_node_api_params();
  $staff_id = $node->field_oup_staff_id['und'][0]['value'];
  //    $staff_id = ou_profile_node_get_field_value($node, 'field_oup_staff_id');
  $oucu = $node->field_oup_oucu['und'][0]['value']; //ou_profile_node_get_field_value($node, 'field_oup_oucu');

  db_set_active('profiles');

  $query = 'SELECT entity_id from {field_data_field_pims_staff_id} WHERE field_pims_staff_id_value = ' . $staff_id;
  $pims_entity_id = db_query($query)->fetchField();

  //  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {content_type_pims} WHERE ';
  //  $query .= 'field_pims_staff_id_value=' . $staff_id ;
  $query = 'SELECT field_pims_l1_estab_unit_code_value FROM {field_data_field_pims_l1_estab_unit_code} WHERE entity_id = ' . $pims_entity_id;
  $unit_code = db_query($query)->fetchField();
  db_set_active();

  $node->do_not_show = FALSE;

  $site_visibility = SITE_NOT_ALLOWED;
  if ($p['site_path'] == ou_profile_server_site_path())
    $site_visibility = SITE_PUBLIC;

  if ($p['unit_code'] || $p['site_path'] == ou_profile_server_site_path()) {

    $profile['ou_profile_data'] = (array)$node;//ou_profile_lget_profile_data($staff_id);
    $pims_record = ou_profile_lget_pims_data($unit_code, $staff_id);

    $profile['pims_data'] = (array)$pims_record;

    $profile_visibility = $profile['ou_profile_data']['field_oup_visibility']['und'][0]['value'];

    if (!$profile_visibility) {
      // Person does not want profile to be viewed
      $node->do_not_show = TRUE;
//      return;
    }
    $NID = $profile['pims_data']['nid'];
    $VID = $profile['pims_data']['vid'];
    // Set database to profiles
    db_set_active('profiles');

    // Build a list of privacy values
    //
    ou_profile_log("building privacy values");
    $a_privacy_values = ou_profile_lget_privacy_values();

    $profile['privacy_values'] = $a_privacy_values;

    // Set database back to original
    db_set_active();

    // Put some variables into $node
    $node->ou_profile = array();

    // Display data according to privacy settings

    $a_oup_fields = array();

    // Create array of allowed "oup" fields, along with field type, single/multiple instance and label
    // Array format is:
    //  ['field_name'] => Array
    //    (
    //      ['multiple'] => value
    //      ['type'] => value
    //      ['label'] => value
    //    )

    $a_oup_fields = ou_profile_lget_field_info('profile');//ou_profile_lget_oup_fields($unit_code);
    $a_pims_fields = ou_profile_lget_field_info('pims');

    $a_ou_profile = array();

    // Loop over all the profile fields, populating $node->ou_profile
    foreach ($a_oup_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // Loop over all the pims fields, populating $node->ou_profile
    foreach ($a_pims_fields as $field_name => $a_field_meta) {
      _ou_profile_strip_private_fields($node, $field_name, $a_field_meta, $a_ou_profile, $profile, $site_visibility);
    }

    // l.austin - Restructure $a_ou_profile array to group the elements by the 'group_name' field and apply field weighting
    $outArray = array();
    ou_profile_make_group_relations($a_ou_profile, $outArray);
    $node->ou_profile['pdata'] = $outArray;
  }
  else {
    // If there's no unit code, then the site isn't allowed access to the profiles server.
    $node->title = "Permission denied";
  }

  // ==================================== Build node title ===============================

  // Start with title, e.g. Dr, but omit Mr, Mrs, Miss and Ms and extend Prof
  $staff_title = "";
  if (isset($node->field_pdat_staff_title['und']) && $node->field_pdat_staff_title['und'][0]['value']) {
    $staff_title = $node->field_pdat_staff_title['und'][0]['value'] . " ";
    if ($staff_title && $staff_title != "Mr" && $staff_title != "Miss" && $staff_title != "Ms" && $staff_title != "Mrs") {
      $staff_title = preg_replace("/Prof/", "Professor", $staff_title) . " ";
    }
  }
  //oupdb("staff title: $staff_title");

  // Add forenames
  $forenames = "";
  if (isset($node->field_pdat_pref_forenames['und']) && $node->field_pdat_pref_forenames['und'][0]['value']) {
    $forenames = $node->field_pdat_pref_forenames['und'][0]['value'] . " ";
  }
  else {
    if (isset($node->field_pdat_staff_forenames['und']) && $node->field_pdat_staff_forenames['und'][0]['value']) {
      $forenames = $node->field_pdat_staff_forenames['und'][0]['value'] . " ";
    }
  }
  //oupdb("forenames: $forenames");

  // Add surname
  $surname = "";
  if (isset($node->field_pdat_pref_surname['und']) && $node->field_pdat_pref_surname['und'][0]['value']) {
    $surname = $node->field_pdat_pref_surname['und'][0]['value'];
  }
  else {
    if (isset($node->field_pdat_staff_surname['und']) && $node->field_pdat_staff_surname['und'][0]['value']) {
      $surname = $node->field_pdat_staff_surname['und'][0]['value'];
    }
  }
  //oupdb("surname: $surname");

  $DO_NOT_DISPLAY=0;
  // Need at least a title and surname, or forename + surname to continue
  if (!$surname)
    $DO_NOT_DISPLAY=1;

  if (!$forenames && !$staff_title)
    $DO_NOT_DISPLAY=1;

  // If the person hasn't set privacy values to show enough of their name/title,
  // or if the profile has been made invisible / disabled, don't show the profile
  if ($DO_NOT_DISPLAY ||
      !$node->field_oup_visibility['und'][0]['value'] ||
      $node->field_oup_visibility['und'][0]['value'] < 2) {
    $node->do_not_show = TRUE;
    if (!preg_match("/edit$/", request_uri())) {
      if ($node->field_oup_visibility['und'][0]['value'] == 0)
        $node->title = "This profile has not yet been published";
      if ($node->field_oup_visibility['und'][0]['value'] == 1)
        $node->title = "This profile is only available on the intranet";
    }
    return;
  }

  if (!$user->uid || $node->uid != $user->uid || !preg_match("/edit$/", request_uri())) {
    $node->title = $staff_title . "$forenames $surname";
  }

  // If a photograph is included and the permissions allow, set the alt tags on the photo
  // And don't set anything if the page is being edited
  if (!preg_match("/edit$/", request_uri())) {
    if ($node->field_oup_photo['und'][0]['fid']) {
      $node->field_oup_photo['und'][0]['data']['alt'] = $node->title;
    }
  }

}

function ou_profile_node_view_profile_page($node, $view_mode, $langcode) {
  global $user;

  drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');
  $your_profile = "";
  $profile_list = "";

  // Traffic light colours - green, amber, red
  $a_colour = array(
      'public' => 'green',
      'intranet' => '#FF6600',
      'invisible' => 'red',
  );
  
  print ("a");


  if ($user->uid > 1) {
    //$query = "SELECT title,nid FROM {node} WHERE uid='%s'";
    
    $query = 
    "SELECT entity_id as nid " .
    "FROM field_data_field_oup_oucu " .
    "WHERE field_oup_oucu_value = :uid";

    $result = db_query($query, array(":uid" => $user->data['oucu']));
    $profile = $result->fetchObject();



    if ($profile->nid) {

      print("loading node");
      $user_record = node_load($profile->nid);
      
//      print("db query");
//      // Get alias
//      $query = "SELECT dst FROM {url_alias} WHERE src=:src";
//      $result =  db_query($query, array(':src' => 'node/' . $profile->nid));
//      $alias = $result->fetchObject();
//      
//      print("alias");
//
//      if (!$alias) {
//        $alias = "node/$profile->nid";
//      }

      //$your_profile .= "<h2>Your profile</h2>\n";
      $visibility = ou_profile_lget_profile_visibility($profile->nid);
      print ($visiblity);
      if ($visibility) {
        $visibility = "&nbsp<span class='oup-visibility-$visibility'>[$visibility]</span>";
      }
      $title = preg_replace("/^Profile:/", "", $user_record->title);
      $your_profile .= "<h2>$title $visibility [<a href='/people/".$user->data['oucu']."'>view</a>] [<a href='node/$profile->nid/edit'>edit</a>]</h2>";
    }
  }

  // Is the user a member of any group-admin groups? If so, generate a list of profiles they can admin.
  $query = "SELECT rid FROM {users_roles} WHERE uid = :uid";

  $result = db_query($query, array(":uid" => $user->uid));
  //while ($data = db_fetch_object($result)) {
  foreach ($result as $data) {
    if ($data->rid) {

      $group_query = "SELECT name FROM {role} WHERE rid = :rid AND name LIKE :name";

      $group_result = db_query($group_query, array(":rid" => $data->rid, ":name" => 'PP%'));

      //while ($group_data = db_fetch_object($group_result)) {
      foreach ($group_result as $group_data) {
        // We only want People Profile groups / roles. These have the format PP0123, i.e. PP + 4 digits
        // - the 4 digits being the level 1 estab unit code.
        if (preg_match("/^PP\d\d\d\d$/", $group_data->name)) {
          //oupdb("Matched group: $group_data->name");
          $unit_id = substr($group_data->name, -4);
          //oupdb("Unit ID: $unit_id");
          $pims_query = "SELECT field_pims_staff_id_value FROM {content_type_pims} " .
              "WHERE field_pims_l1_estab_unit_code_value = '%s' " .
              "ORDER BY field_pims_staff_surname_value";

          //oupdb("PIMS SQL: $pims_query;");
          $pims_result = db_query($pims_query, $unit_id);
          $a_pims_staff_ids = array();
          while ($pims_data = db_fetch_object($pims_result)) {
            array_push($a_pims_staff_ids, $pims_data->field_pims_staff_id_value);
          }

          $pims_staff_ids = implode(",", $a_pims_staff_ids);
          //$profile_query = "SELECT n.title, n.nid, n.uid FROM node AS n, content_type_profile AS p WHERE n.nid=p.nid AND p.field_oup_staff_id_value IN (" . $pims_staff_ids . ")";
          $profile_query  = "SELECT n.title, n.nid, n.uid, pi.field_pims_staff_surname_value, ";
          $profile_query .= "pi.field_pims_pref_surname_value, pi.field_pims_staff_forenames_value,";
          $profile_query .= "pi.field_pims_pref_forenames_value, pi.field_pims_staff_title_value ";
          $profile_query .= "FROM node AS n, content_type_profile AS pr, content_type_pims AS pi ";
          $profile_query .= "WHERE n.nid=pr.nid AND pi.field_pims_staff_id_value=pr.field_oup_staff_id_value ";
          $profile_query .= "AND pr.field_oup_staff_id_value IN (" . $pims_staff_ids . ") ";
          $profile_query .= "ORDER BY pi.field_pims_staff_surname_value";
          //oupdb("Profile query: $profile_query;");
          $profile_result = db_query($profile_query);
          //while ($profile_data = db_fetch_object($profile_result)) {
          foreach($profile_result as $profile_data) {
            if ($user->uid <> $profile_data->uid) { // Exlude own profile
              //oupdb ("ADDING:: $profile_data->nid - $profile_data->title");
              $forenames = $profile_data->field_pims_staff_forenames_value;
              if ($profile_data->field_pims_pref_forenames_value && $profile_data->field_pims_pref_forenames_value <>$profile_data->field_pims_staff_forenames_value) {
                $forenames .= " [$profile_data->field_pims_pref_forenames_value]";
              }
              $surname = $profile_data->field_pims_staff_surname_value;
              if ($profile_data->field_pims_pref_surname_value && $profile_data->field_pims_pref_surname_value <> $profile_data->field_pims_staff_surname_value) {
                $surname .= " [$profile_data->field_pims_pref_surname_value]";
              }

              $visibility = ou_profile_lget_profile_visibility($profile_data->nid);
              if ($visibility) {
                $visibility = "&nbsp<span class='oup-visibility-$visibility'>[$visibility]</span>";
              }

              $profile_list .= "<li>" .
                  l($surname . ", " . $forenames, "node/" . $profile_data->nid) . $visibility .
                  "</li>\n";
            }
          }
        }
      }
    }
  }

  if ($your_profile) {
    $node->content['body'][0]['#markup'] .= $your_profile;
  }

  // Is the user a member of DRADMIN role?
  //if (in_array('DRADMIN', array_values($user->roles))) {
  // Is the user more than just "authenticated"
  if (count($user->roles) > 1) {

    // Check to see if a unit has been requested via GET
    $unit_id = "";
    if ($_GET['unit']) {
      if (is_numeric($_GET['unit'])) {
        $unit_id = $_GET['unit'];
      }
    }

    // Has a unit been requested to be viewed and do we have permissions?
    if ($unit_id) {

      // Get a list of units
      $query = "SELECT n.title, u.field_unit_code_value FROM {node} AS n, content_type_ou_unit AS u WHERE n.nid=u.nid AND u.field_unit_code_value=:unit_code ORDER by n.title";
      $result = db_query($query, array(":unit_code" => $unit_id));

      //while ($data = db_fetch_object($result)) {
      foreach ($result as $data) {
        $title = $data->title;
      }

      if (in_array("PP" . $unit_id, array_values($user->roles)) ||
          in_array('DRADMIN', array_values($user->roles))
      ) {

        // Wrap the unit list in a div and ul (if it exists)
        $node->content['body'][0]['#markup'] .= "<h2>" . $title . "</h2>";


        $pims_query = "SELECT field_pims_staff_id_value FROM {content_type_pims} WHERE field_pims_l1_estab_unit_code_value=:unit_id ORDER BY field_pims_staff_surname_value";
        $pims_result = db_query($pims_query, array(":unit_id" => $unit_id));
        $a_pims_staff_ids = array();
        //while ($pims_data = db_fetch_object($pims_result)) {
        foreach ($pims_result as $pims_data) {
          array_push($a_pims_staff_ids, $pims_data->field_pims_staff_id_value);
        }

        if (count($a_pims_staff_ids)) {
          $pims_staff_ids = implode(",", $a_pims_staff_ids);
          $profile_query  = "SELECT DISTINCT n.title, n.nid, n.uid, pi.field_pims_staff_surname_value, ";
          $profile_query .= "pi.field_pims_pref_surname_value, pi.field_pims_staff_forenames_value,";
          $profile_query .= "pi.field_pims_pref_forenames_value, pi.field_pims_staff_title_value ";
          $profile_query .= "FROM node AS n, content_type_profile AS pr, content_type_pims AS pi ";
          $profile_query .= "WHERE n.nid=pr.nid AND pi.field_pims_staff_id_value=pr.field_oup_staff_id_value ";
          $profile_query .= "AND pr.field_oup_staff_id_value IN (" . $pims_staff_ids . ") ";
          $profile_query .= "ORDER BY pi.field_pims_staff_surname_value";

          $profile_result = db_query($profile_query);
          $group_list = "";

          //while ($profile_data = db_fetch_object($profile_result)) {
          foreach ($profile_result as $profile_data) {
            $forenames = $profile_data->field_pims_staff_forenames_value;
            if ($profile_data->field_pims_pref_forenames_value && $profile_data->field_pims_pref_forenames_value <>$profile_data->field_pims_staff_forenames_value) {
              $forenames .= " [$profile_data->field_pims_pref_forenames_value]";
            }
            $surname = $profile_data->field_pims_staff_surname_value;
            if ($profile_data->field_pims_pref_surname_value && $profile_data->field_pims_pref_surname_value <> $profile_data->field_pims_staff_surname_value) {
              $surname .= " [$profile_data->field_pims_pref_surname_value]";
            }
            $visibility = ou_profile_lget_profile_visibility($profile_data->nid);
            if ($visibility) {
              $visibility = "&nbsp; <span style='color:" . $a_colour[$visibility] . "'>[$visibility]</span>";
            }
            $group_list .= "<li>" .
                l($surname . ", " . $forenames, "node/" . $profile_data->nid)
                . $visibility .
                "</li>\n";

            // Fix for profiles with title set to "This profile has not yet been published"
            if ($profile_data->title == "This profile has not yet been published") {
              if ($profile_data->field_pims_pref_forenames_value) {
                $forenames = $profile_data->field_pims_pref_forenames_value;
              }
              else {
                $forenames = $profile_data->field_pims_staff_forenames_value;
              }

              if ($profile_data->field_pims_pref_surname_value) {
                $surname = $profile_data->field_pims_pref_surname_value;
              }
              else {
                $surname = $profile_data->field_pims_staff_surname_value;
              }

              $title = "";
              if ($profile_data->field_pims_staff_title_value) {
                $title .= $profile_data->field_pims_staff_title_value . " ";
              }
              $title .= "$forenames $surname";
              $tmp_node = node_load($profile_data->nid, NULL, TRUE);
              $tmp_node->title = $title;
              node_save($tmp_node);
              node_load(NULL, NULL, TRUE); // keep the cache empty - any deleted nodes will be cleared from memory
              unset($tmp_node);
            }
          }
        }
        else {
          $group_list .= "<p>There are no profiles.</p>\n";
        }
      }
      else {
        $node->content['body'][0]['#markup'] .= "<h2>You dont have permissions to manage " . $title . "</h2>\n";

        if ($profile_list) {
          $node->content['body'][0]['#markup'] .= "<h2>Other profiles you can edit</h2>\n";
          $node->content['body'][0]['#markup'] .= "<ul>\n" . $profile_list . "</ul>\n";
        }
      }
    }
  }



  if ($group_list) {
    //$node->content['body'][0]['#markup'] .= "<h3>$unit_title\n</h3>";
    $node->content['body'][0]['#markup'] .= "<ul>\n";
    $node->content['body'][0]['#markup'] .= $group_list;
    $node->content['body'][0]['#markup'] .= "</ul>\n";
  }

}

///////////////////////////// END VIEW NODES /////////////////////////////////////////////

function _ou_profile_strip_private_fields(&$node, $field_name, $a_field_meta, &$a_ou_profile, $profile, $site_visibility) {

  // Unpack the relevant data from the array
  $a_profile_data = $profile['ou_profile_data'];
  $a_privacy_values = $profile['privacy_values'];
  $a_pims_data = $profile['pims_data'];
  $value = NULL;

  $NID = $profile['pims_data']['nid'];
  $VID = $profile['pims_data']['vid'];

  if (preg_match("/^field_oup_/", $field_name)) {
    $privacy_field = preg_replace("/^field_oup_/", "field_prv_", $field_name);
    $value = $profile['ou_profile_data'][$field_name];
  }
  elseif (preg_match("/^field_pdat_/", $field_name)) {
    // Field is a PIMS profile place-holder (field_pdat_)
    $privacy_field = preg_replace("/^field_pdat_/", "field_pprv_", $field_name);
    $value = $profile['ou_profile_data'][$field_name];
  }
  elseif (preg_match("/^field_pims_/", $field_name)) {
    $privacy_field = preg_replace("/^field_pims_/", "field_pprv_", $field_name);
    $value = $profile['pims_data'][$field_name];
  }
  else // Nothing to do here
    return;

  $field_privacy_value = -1; // Default to Private / not shown if not set
  
  if (!empty($a_profile_data[$privacy_field]) &&
      isset($a_privacy_values[$a_profile_data[$privacy_field]['und'][0]['nid']])) {
    $field_privacy_value = $a_privacy_values[$a_profile_data[$privacy_field]['und'][0]['nid']];
  }

  // Some fields need to be always public for evaluation purposes
  // The data is set by PIMS so cant be adjusted
  $public_fields = array( 
    'field_pdat_pref_forenames',
    'field_pdat_staff_forenames',
    'field_pdat_pref_surname',
    'field_pdat_staff_surname',
    'field_pdat_staff_title',
    'field_oup_visibility',
  );
  
  if (in_array($field_name, $public_fields))
    $field_privacy_value = 3;

  $a_ou_profile[$field_name] = $a_field_meta;

  if (!empty($a_field_meta['multiple']) && $a_field_meta['multiple'] == 1) {
    // Multi instance field
    $a_ou_profile[$field_name]['multi'] = 1;

    // Add data if privacy settings allow
    if ((int) $field_privacy_value >= (int) $site_visibility) {
      $table_name = "content_" . $field_name;
      $a_field_data = ou_profile_lget_multi_field_data($table_name, $NID);
      $a_ou_profile[$field_name]['value'] = $a_field_data;
    }
    else {
      $a_ou_profile[$field_name]['value'] = "";
    }
  }
  else {
    // Single instance field
    $a_ou_profile[$field_name]['multi'] = 0;

    // Add data if privacy settings allow
    if ((int) $field_privacy_value >= (int) $site_visibility) {
      if (isset($value)) {
        $a_ou_profile[$field_name]['value'] = $value;
      }
    }
    else {
      $a_ou_profile[$field_name] = "";
      if ($field_name != 'field_oup_staff_id')
        unset($node->$field_name);
    }

    unset ($node->$privacy_field);
  }
}

/**
* Implementation of hook_form_alter().
*/
function ou_profile_form_alter(&$form, $form_state, $form_id) {

	drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');
	drupal_add_js(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_scripts.js');

	switch ($form_id)
	{
		case 'allowed_sites_node_form':
/*			
		
			$form['field_ou_unit_ref']['und']['#ajax'] = array(
					'event' => 'change',
					'callback' => 'ou_profile_ou_unit_callback',
					'wrapper' => 'edit-field-test',
			);

			$selected = isset($form_state['values']['field_ou_unit_ref']) ? $form_state['values']['field_ou_unit_ref'] : "_none";
			if( $selected == "_none" )
			{
				$form['field_test']['und']['#options'] = array(
					'_none' => '-- Select Unit Ref first --',
				);
			}
*/
			return $form;
		break;
			
		case 'profile_node_form':
			$INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
			$site_name = variable_get('site_name', 0);
			require_once "$INCLUDES/local_functions.inc";


			// Add some helper text about PIMS
			//<a href="https://msds.open.ac.uk/sss/index.aspx?">EDIT YOUR PIMS DATA</a></div>';
			$elem = t('<a href="@url">Edit your PIMS data</a>', array('@url' => url('https://msds.open.ac.uk/sss/index.aspx')));


			// Refer to the form validation function below
			$form['#validate'] = array('ou_profile_form_validate');

			// Refer to the form submission function below
			$form['#submit'] = array('ou_profile_form_submit');

			$staff_id = ou_profile_node_get_field_value($form['#node'], 'field_oup_staff_id');
			if (!$staff_id)
			  return;

			// Add PIMS data to the related PIMS data placeholder (field_pdat_*) in the profile content
			$a_pims_data = (array)ou_profile_lget_pims_data(0, $staff_id);
			foreach ($form['#node'] as $key => $val) {
			  if (preg_match("/^field_pdat_/", $key)) {
				$pims_field_name = preg_replace("/^field_pdat_/", "field_pims_", $key);
				$form[$key][0]['#default_value']['value'] = $a_pims_data[$pims_field_name];
			  }
			}

			// Add call back to allow making some fields read-only
			if (isset($form['type']) && isset($form['#node'])) {
			  $form['#after_build'][] = '_ou_profile_after_build';
			}



			$query = db_select('field_data_field_pims_l1_estab_unit_code', 'l1_units');
			$query->addField('l1_units', 'field_pims_l1_estab_unit_code_value', 'pims_l1_estab_unit_code');
			$query->condition('l1_units.entity_id', $form['#node']->nid, '=');

			$unit_code = $query->execute()->fetchField();

			// Prevent the field group group_oubs from being displayed.
			$a_field_groups = array();

			// get a list of field groups in the form - the last 4 digits of the
			// field group name is the Level 1 establishing unit of the person.
			// Thus we get a list of field groups and determine whether to show
			// the fields in that field group.
			// But allow for general groups which don't have unit codes in them
			foreach ($form as $key => $val) {
			  if (preg_match("/^group_oup_/", $key)) {
				$fg_unit_code = substr($key, -4);
				if ($fg_unit_code != $unit_code && is_numeric($fg_unit_code)) {
				  // Hide the field group if the person is not in the unit / department
				  // the field group belongs to.
				  unset($form[$key]);
				}
			  }
			}

			// Prevent the field "Staff ID", OUCU and "Title" from being displayed.
			unset($form['field_oup_staff_id']);
			unset($form['field_oup_surname']);
			unset($form['field_oup_staff_category']);
			unset($form['field_oup_academic_centre']);
			unset($form['field_oup_oucu']);
			unset($form['title']);

			// Remove any PIMS data placeholders from the form - these are filled automatically by the module when viewing
			// TODO: This bit throws out errors
			foreach ($form as $key => $val) {
			  if (preg_match("/^field_pdat_/", $key)) {
				unset($form[$key]);
			  }
			  if (preg_match("/^group_/", $key)) {
				  foreach ($val as $field2 => $val2) {
				  if (preg_match("/^field_pdat_/", $field2)) {
					unset($form[$key][$field2]);
				  }
				}
			  }
			}

			// Insert PIMS values next to privacy field settings
			$pims_data = (array)ou_profile_lget_pims_data(0, $staff_id);
			foreach ($form as $key => $val) {

			  if (preg_match("/^group_/", $key)) {
				  foreach ($val as $field2 => $val2) {
				  if (preg_match("/^field_pprv_/", $field2)) {
					$current_value = $pims_data[preg_replace("/pprv/", "pims", $field2) . '_value'];
					$style = ' class="pims"';
					if ($current_value) {
					   $form[$key][$field2]['#title'] .= "<span $style> - CURRENT VALUE IN PIMS = '" . $current_value . "'</span>";
					}
				else {
					   $form[$key][$field2]['#title'] .= "<span $style> - NO CURRENT VALUE IN PIMS</span>";
					}
				  }
				  }
			  }

			  if (preg_match("/^field_pprv_/", $key)) {
				 $current_value = $pims_data[preg_replace("/pprv/", "pims", $key)];
				 $style = ' class="pims"';
				 if ($current_value) {
					  $form[$key]['und']['#title'] .= "<span $style> - CURRENT VALUE IN PIMS = '" . $current_value['und'][0]['value'] . "'</span>";
				 }
				else {
					$form[$key]['und']['#title'] .= "<span $style> - NO CURRENT VALUE IN PIMS</span>";
				 }
			  }
			}

			// Remove the "name" information as PIMS should determine what a persons name is
			$forced_fields = array(
			  "field_pprv_staff_title",
			  "field_pprv_staff_forenames",
			  "field_pprv_pref_forenames",
			  "field_pprv_pref_surname",
			  "field_pprv_staff_surname",
			  "field_pprv_staff_initials",
			);
			foreach ($form as $key => $val) {
			  if (preg_match("/^group_/", $key)) {
				foreach ($val as $field2 => $val2) {
				  if (in_array($field2, $forced_fields)) {
					unset($form[$key][$field2]);
				  }
				}
			  }

			  if (in_array($key, $forced_fields)) {
				unset($form[$key]);
			  }
			}

			$form['actions']['submit']['#attributes']['class'][] = 'profile-submit';
			unset($form['actions']['preview']);
			unset($form['actions']['delete']);
			return;
			break;
	}


}


/** ou_profile_form_validate
 *
 * Author Mark Williams
 *
 * These validations are in addition to those provided with CCK modules
 *
 */
function ou_profile_form_validate(&$form, &$form_state) {
  if ($form_state['values']['form_id'] == "profile_node_form") {

    // Alternative email address must contain open.ac.uk

    if ($form_state['values']['field_oup_alternative_email']['und'][0]['email'] &&
      ! preg_match("/open\.ac\.uk/", $form_state['values']['field_oup_alternative_email']['und'][0]['email'])) {
      form_set_error('field_oup_alternative_email', t('Your alternative email address must contain @open.ac.uk.'));
    }

  }
}

function ou_profile_form_submit($form, &$form_state) {

  // Before submitting, make sure the visibility flag is set to the
  // highest value used from the data

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  // Build a list of nid / privacy values
  $a_privacy_values = ou_profile_lget_privacy_values();

  // An array to link the type of CCK visiblity to the type of profile visibility
  $a_site_visibility = array(
      3 => 2,
      2 => 1,
      1 => 0,
      0 => 0,
  );

  // A variable to store the most public visiblity setting
  $final_visibility = 0;

  // Remove any PIMS data placeholders from the form - these are filled automatically by the module when viewing
  foreach ($form_state['values'] as $key => $val) {

    if (preg_match("/^field_prv_/", $key) || preg_match("/^field_pprv_/", $key)) {
        $item_visibility = $val['und'][0]['nid'];
        if (isset($item_visibility) && $a_privacy_values[$item_visibility] > $final_visibility)
          $final_visibility = $a_privacy_values[$item_visibility];
    }

    if (preg_match("/^group_/", $key)) {
      foreach ($val as $field2 => $val2) {
        if (preg_match("/^field_prv_/", $field2) || preg_match("/^field_pprv_/", $field2)) {
          $item_visibility = $val2[0]['nid'];
            if ($a_privacy_values[$item_visibility] > $final_visibility)
              $final_visibility = $a_privacy_values[$item_visibility];
          }
      }
    }
  }

  $form_state['values']['field_oup_visibility']['und'][0]['value'] = $a_site_visibility[$final_visibility];
}




/**
* Custom after_build callback handler.
*/
function _ou_profile_after_build($form, &$form_state) {
  if ($form['#node']->type == "profile") {
    // Make PIMS placeholders READONLY in the profile form.
    foreach ($form['#node'] as $key => $val) {
      if (preg_match("/^field_pdat_/", $key)) {
        _ou_profile_fix_disabled($form['#node']->{$key});
      }
    }
  }
  return $form;
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function _ou_profile_fix_disabled(&$elements) {


  if (!is_array($elements))
    return;

  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
       // Recurse through all children elements.
      _ou_profile_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes']))
    $elements['#attributes'] = array();

  $elements['#attributes']['disabled'] = 'disabled';

}


function ou_profile_user($op, &$edit, &$account, $category = NULL) {

  // When a user logs in, check if they have any profiles. If they do, set the owner
  // of the profile to their UID
  if ($op == "login") {
    $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
    require_once "$INCLUDES/local_functions.inc";

    $site_path = ou_profile_lget_site_path();
    $uid = $account->uid;
    $oucu = $account->name;

    if ($uid>1 && $oucu && ($site_path == ou_profile_server_site_path())) {
      ou_profile_lset_profile_owner($oucu, $uid);
    }

  }

}

function ou_profile_add_body_classes(&$vars) {
  // Do an easy check to see if this is a profile page
  if (in_array('node-type-profile', $vars['classes_array'])) {
    if (isset($vars['page']['content']['system_main']['nodes'])) {
      $node = reset($vars['page']['content']['system_main']['nodes']);
      if (isset($node)) {
        $vars['classes_array'][] = $node['field_oup_profile_layout'][0]['#markup'];
        $vars['classes_array'][] = $node['field_oup_profile_layout_colour'][0]['#markup'];
      }
    }
  }
}

function ou_profile_preprocess_html(&$vars) {
  ou_profile_add_body_classes($vars);
}

/**
*
* Implementation of hook_theme()- requires cache to be cleared
*
* Authors: Mark Williams & Paul Dixon
*
* Declare functions for use in themes on profile server
*
*/
function ou_profile_theme($existing, $type, $theme, $path) {

  $modulepath = drupal_get_path('module', 'ou_profile');

  $retarray =  array(
    'get_profile_nodes' => array(
      'arguments' => array('query' => NULL)
    ),
    'get_profile_node_list' => array(
      'arguments' => array('query' => NULL)
    ),
    'node--profile' => array(
        'variables' => array('content' => NULL, 'node' => NULL, 'classes' => NULL),
        'template' => 'node--profile',
        'path' =>  $modulepath . "/shared",
    ),
    'page--profile' => array(
      'variables' => array('content' => NULL, 'node' => NULL, 'classes' => NULL),
      'template' => 'page--profile',
      'path' =>  $modulepath . "/shared",
    ),
    'profile_node_form' => array( 
      'arguments' => array( 
        'form' => NULL,
      ),
      'template' => 'node-profile-edit',
      'path' => $modulepath . "/includes/templates",
      'render element' => 'form'
    )
  );

    return $retarray;
}

function ou_profile_preprocess_node(&$vars) {

  // Here is the way to switch to make drupals theme layer use a module specific template file
  if ($vars['type'] == 'profile' || $vars['type'] == 'ou_profile') {

    $vars['theme_hook_suggestions'] = array(
        'node--profile', // This needs to match a value in hook_profile_theme
    );
  }

  return $vars;

}

function ou_profile_preprocess_page(&$vars) {

  // Dont do these suggestions if we are on the edit page.
  // Cant find a better way to tell if thats where we are...
  $params = explode('/', $_GET['q']);
  if (isset($params[2]) && $params[2] == 'edit') {
    return $vars;
  }


  // Here is the way to switch to a different page-<something> template based on node properties.
  // We use this so that profile and ou_profile can share the same template file.
  if (isset($vars['node'])) {

    if ($vars['node']->type == 'profile' || $vars['node']->type == 'ou_profile') {

      $vars['theme_hook_suggestions'] = array(
          'page--profile',
      );
    }
  }

  return $vars;
}

/**
*
* Author: Mark Williams
*
* Return a list of local nodes on client website based on query of full profile and PIMS nodes on profile server
* in the form of a nice HTML list of links or an array of node ids
*
*/
function theme_get_profile_node_list($query = NULL, $type = "array") {
  // Include the local functions so that we can call the log command
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/people_functions.inc";

  $staff_nodes = ou_profile_get_profile_nodes($query, $type);
  if ($type == "list") {
    $staff_list = "";
    if (is_array($staff_nodes)) {
      foreach ($staff_nodes as $staff_node) {
         $staff_list .= "<li>" . $staff_node . "</li>\n";
      }
    }
    if ($staff_list) {
       $staff_list = "<ul>\n" . $staff_list . "</ul>";
    }
    else {
       $staff_list = "<p>No results found for query: $query</p>";
    }
    return $staff_list;
  }
  else {
    if (count($staff_nodes)) {
          return $staff_nodes;
    }
    else {
          return "<p>No results found for query: $query</p>";
    }
       }
}

/**
*
* Author: Mark Williams
*
* Return an array of expertise keywords for the client website's unit
*
*/
function theme_get_expertise_tags() {

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  $a_site_info = ou_profile_lget_site_info();
  $unit_code = $a_site_info['unit_code'];
  $site_visibility = (int) $a_site_info['visibility'];

  // Set database to profiles
  db_set_active('profiles');

  // TODO: Rewrite me as db_query array
  $sql_query = "SELECT DISTINCT field_oup_expertise_value ";
  $sql_query .= "FROM {content_type_profile}, {content_type_pims}, {content_field_oup_expertise}, {content_type_privacy_value} ";
  $sql_query .= "WHERE content_field_oup_expertise.nid = content_type_profile.nid ";
  $sql_query .= "AND content_type_profile.field_oup_staff_id_value=content_type_pims.field_pims_staff_id_value ";
  $sql_query .= "AND content_type_profile.field_prv_expertise_nid=content_type_privacy_value.nid ";
  $sql_query .= "AND content_type_privacy_value.field_privacy_value_value>=" . $site_visibility . " ";
  $sql_query .= "AND content_type_pims.field_pims_l1_estab_unit_code_value=" . $unit_code . " ";
  $sql_query .= "AND content_field_oup_expertise.field_oup_expertise_value IS NOT NULL ";

  $sql_result = db_query($sql_query);

  $tags = array();
  while ($row = $sql_result->fetchObject()) {
    $tags[] = $row->field_oup_expertise_value;
  }

  db_set_active();

  return $tags;
}

/**
 * Create custom meta-tags using nodewords API
 *
 */
function ou_profile_nodewords_tags_alter(&$tags, $parameters) {
  if ($GLOBALS['oup_meta_description']) {
    $tags['description'] = $GLOBALS['oup_meta_description'];
  }
}

/**
*
* Author: Paul Conolly
*
* Implemetation of hook_action_info()
* To trigger cURL call to http://data.open.ac.uk/update/person/oucu where oucu represents value stored in oucu field
*
* If these need removing visit admin/settings/actions/orphan on the sites that were using the actions
*/

function ou_profile_action_info() {
  return array(
    'ou_profile_oucu_action' => array(
      'type' => 'node',
      'label' => t('Update OU RDF data (data.open.ac.uk)'),
      'configurable' => FALSE,
      'triggers' => array('node_presave')
    ),
  );
}

/*
*
* Implemtation of drupal action
* Calls cURL action    ou_profile_log("reporting information update to " . $_curl);
*
*
*/

function ou_profile_oucu_action($node, $context = array()) {

  ou_profile_log("node->type = " . $node->type . " | nid = " . $node->nid);
  $oucu = NULL;

  if ($node->type == 'profile') {  // oucu is unset so we need to go and get it from the content type data set.
    db_set_active();
    $sql = "SELECT field_oup_oucu_value FROM field_data_field_oup_oucu where entity_id = :nid";
    $oucu = db_query($sql, array(':nid' => $node->nid ))->fetchField();
    //$oucu = db_result(db_query("SELECT field_oup_oucu_value FROM {content_type_profile} WHERE nid = %d", $node->nid));
  }
  elseif (!empty($node->field_pims_oucu['und'][0]['value'])) {
    $oucu = $node->field_pims_oucu['und'][0]['value']; // if there's an OUCU value use it.
  }

  ou_profile_log("oucu = " . $oucu);
  if (!empty($oucu)) {

    //$_curl = 'http://www8-rosella.open.ac.uk/about/main/'.$oucu; // look at \\rosella\log\www8openacuk-access_log to see this
    $_curl = 'http://data.open.ac.uk/page/update/person/' . $oucu;
    watchdog('ou_profile', "reporting information update to :curl ", array(":curl" => $_curl), WATCHDOG_INFO, NULL);
    drupal_http_request($_curl);
  }
}


/**
 * Implements hook_permission().
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the module
 */

function ou_profile_permission() {
  return array(
      'administer data load' => array(
          'title' => t('Force profile data load'),
          'description' => t('Start a load of the data that cron would usually trigger'),
      ),
  );
} 

function ou_profile_block_info() {
  $blocks['_unit_list'] = array(
      'info' => t("People PIMS Units List"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'region2',
      'pages' => 'my-profile',
  );
  $blocks['_people_search']= array(
      'info' => t("People search box"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
  );
  $blocks['_people_az']= array(
      'info' => t("People A-Z"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
  );

  return $blocks;
}

function ou_profile_block_view($delta = '') {

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/block_functions.inc";

  switch ($delta) {
    case '_unit_list': // PIMS Units List
    $block = ou_profile_get_unit_list_block();
      break;
    case '_people_search': // People search box
    $block = ou_profile_get_people_search_block();
      break;
    case '_people_az': // People A-Z
    $block = ou_profile_get_people_list_block();
      break;
  }

  // Make sure the css is loaded to style the blocks correctly.
  if (!empty($block)) {
    $block['content']['#attached']['css'][] = drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css';
  }

  return $block;
}

/* List all available units on right of page */
function ou_profile_block($op='list', $delta = 0) {

  // listing of blocks, such as on the admin/block page
  if ($op == "list") {
           // This list should only be visible to admins, but theres
              // no way to code that as a default. Anyone creating a profile server will
              // have to do this manually.

    $blocks['_unit_list'] = array(
      'info' => t("People PIMS Units List"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'region2',
      'pages' => 'my-profile',
    );
    $blocks['_people_search']= array(
      'info' => t("People search box"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
    );
    $blocks['_people_az']= array(
      'info' => t("People A-Z"),
      'status' => TRUE,
      'visibility' => 1,
      'region' => 'content',
      'pages' => 'people/people-search',
    );

    return $blocks;
  }
  elseif ($op == 'view') {

    // Make sure the css is loaded to style the blocks correctly.
    drupal_add_css(drupal_get_path('module', 'ou_profile') . '/includes/ou_profile_styles.css');

    $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
    require_once "$INCLUDES/block_functions.inc";

    switch ($delta) {

      case '_unit_list': // PIMS Units List
        $block = ou_profile_get_unit_list_block();
        break;
      case '_people_search': // People search box
        $block = ou_profile_get_people_search_block();
        break;
      case '_people_az': // People A-Z
        $block = ou_profile_get_people_list_block();
        break;
   }

    return $block;
  }
}

function ou_profile_token_info() {

  $info['tokens']['node']['oucu'] = array(
      'name' => t('Profile oucu'),
      'description' => t("The OUCU of the OU profile."),
  );

  return $info;
}

function ou_profile_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'node' && !empty($data['node'])) {
      $node = $data['node'];
      foreach ($tokens as $name => $original) {
           switch ($name) {
             case 'oucu':
               // TODO: Replace this value with a real function that gets the OUCU
               $replacements[$original] = $node->field_oup_oucu['und'][0]['value'];
           }
      }
  }

  return $replacements;
}






/**
 * Immediate import as requested by config form.
 */
function _immediate_import()
{
  $module_path = drupal_get_path('module', 'ou_profile');
  require_once $module_path.'/pp_plus_pims_import.inc';

	_pims_import_initialise( 'user_import' );
/*** REMOVE THIS. THIS IS SERVER MODULE, SO NO NEED TO RUN CHECKS 

  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";

  watchdog("ou_profile", "Starting cron");

  $CLIENT = 0;
  $SERVER = 0;

  if (node_type_get_type("ou_profile")) {
    $CLIENT = 1;
  }

  if (node_type_get_type("profile")) {
    $SERVER = 1;
  }

  global $user, $user_is_admin, $staff_id;

  // Prepare the required values
  $p = ou_profile_node_api_params();
  
  if ($p['site_path'] == $ou_profile_server_site_path())
    $SERVER = TRUE;

  if ($SERVER) { // run cron for server and OUBS reporting
    watchdog("ou_profile", "Running server cron");
    include "cron/server_cron.inc";
  }
  else {   // site is allowed to access the profiles system
    watchdog("ou_profile", "Running client cron");
    include "cron/client_cron.inc"; // run cron for client including OUBS reporting
  }
**/

  //**** ADD FUNCTION TO PROCESS USING DRUPAL BATCH

}

// function bt()
// {
//    array_walk( debug_backtrace(), create_function( '$a,$b', 'print "<br /><b>" . basename( $a[\'file\'] ). "</b> &nbsp; <font color=\"red\">{$a[\'line\']}</font> &nbsp; <font color=\"green\">{$a[\'function\']} ()</font> &nbsp; -- " . dirname( $a[\'file\'] ). "/";' ) );
// }

/*
* SERVICES Implementation
*/

/**
 * Implements hook_services_resources().
 */
function ou_profile_services_resources() {
  return array(
    'ou_site_profile' => array(
      'retrieve' => array(
        'callback' => '_ou_profile_staff_record_retrieve',
        'args' => array(
          array(
            'name' => 'staff_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'Staff ID.',
          ),
        ),
        'access callback' => '_ou_profile_staff_record_retrieve_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      ),
    ),
    'ou_public_profile' => array(
        'retrieve' => array(
            'callback' => '_ou_profile_public_record_retrieve',
            'args' => array(
                array(
                    'name' => 'oucu',
                    'optional' => FALSE,
                    'source' => array('path' => 0),
                    'type' => 'varchar',
                    'description' => 'OUCU',
                ),
            ),
            'access callback' => '_ou_profile_public_record_retrieve_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
        ),
    ),
  );
}

/**
 * CRUD retrieve callback.
 */
function _ou_profile_staff_record_retrieve($staff_id) {

	watchdog( "ou_profile", "REST : ".$staff_id );
  $query = 'SELECT entity_id FROM {field_data_field_oup_staff_id} WHERE field_oup_staff_id_value=\'' . $staff_id . '\'';
  $nid = db_query($query)->fetchField();
	watchdog( "ou_profile", "REST : ".$staff_id." NID : ".$nid );

  // Load the node
  $node = node_load($nid, NULL, FALSE);
  
  //Get the oucu here as it's removed on the next line
  $oucu = $node->field_oup_oucu['und'][0]['value'];
	watchdog( "ou_profile", "REST : ".$staff_id." OUCU : ".$oucu );
  
  // Run it in view mode (to remove any private fields)
  ou_profile_node_view($node, "full", "en");

  if (isset($node->ou_profile)) {
    // Ensure the images exist
    // This should really be a loop to find all images and generate them, but Im running out of time.
    // So I'll just do the two that exist for now.
    
    if (isset($node->ou_profile['pdata']['group_sss_info']['group_photograph']['field_oup_photo']['value']['und'][0]['uri'])) {
      // The persons face
      $image_uri      = $node->ou_profile['pdata']['group_sss_info']['group_photograph']['field_oup_photo']['value']['und'][0]['uri']; // or any public://my_image
      $style          = 'profile_photo';
      $derivative_uri = image_style_path($style, $image_uri);
      $success        = file_exists($derivative_uri) || image_style_create_derivative($style, $image_uri, $derivative_uri);
      $new_image_url  = file_create_url($derivative_uri);
    }
    
    if (isset($node->ou_profile['pdata']['group_layout_design']['group_image']['field_oup_profile_layout_image']['value']['und'][0]['uri'])) {
      // The banner image they chose
      $image_uri      = $node->ou_profile['pdata']['group_layout_design']['group_image']['field_oup_profile_layout_image']['value']['und'][0]['uri']; // or any public://my_image
      $style          = 'profile_image';
      $derivative_uri = image_style_path($style, $image_uri);
      $success        = file_exists($derivative_uri) || image_style_create_derivative($style, $image_uri, $derivative_uri);
      $new_image_url  = file_create_url($derivative_uri);
    }
  }
  
  //Set the oucu. Used in client site to retrieve ORO data.
  $node->ou_profile["oucu"] = $oucu;
  return $node->ou_profile;
}

/**
 * Access callback.
 */
function _ou_profile_staff_record_retrieve_access($op) {
  ou_profile_log("_ou_profile_staff_record_retrieve_access");
  $INCLUDES = drupal_get_path('module', 'ou_profile') . "/includes";
  require_once "$INCLUDES/local_functions.inc";
  if(isset($_SERVER['HTTP_REFERER'])) {
    ou_profile_log( "staff record retrieve from referrer = (" . $_SERVER['HTTP_REFERER'] . ")" );

    if (ou_profile_lsite_allowed($_SERVER['HTTP_REFERER'])) {
      return TRUE;
    }
  }

  // TODO: Set this up to check the requesting site is allowed to retrieve this record
  
  //SSK-DEV Swapped out
  //return FALSE;
  return TRUE;
}

/**
 * CRUD retrieve callback.
 */
function _ou_profile_public_record_retrieve($oucu) {
  //return 'CRUD Retrieve ' . $arg1;

  $query = 'SELECT entity_id FROM {field_data_field_oup_oucu} WHERE field_oup_oucu_value=\'' . $oucu . '\'';
  $nid = db_query($query)->fetchField();

  // Load the node
  $node = node_load($nid, NULL, FALSE);
  // Run it in view mode (to remove any private fields)
  ou_profile_node_view($node, "full", "en");

  return $node->ou_profile;
}

/**
 * Access callback.
 */
function _ou_profile_public_record_retrieve_access($op) {
  // TODO: Set this up to check the requesting site is allowed to retrieve this record
  return TRUE;
}

