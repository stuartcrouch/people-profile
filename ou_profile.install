<?php
/**
 * @file
 * The ou_profile installation/uninstallation scripts
 */
// $Id$

/**
 * Implementation of hook_enable().
 */
function ou_profile_enable() {
  // Set the weight of the this module above fieldgroup, so that hook_form alter can access
  // any forms before being processed by fieldgroup

  $weight = db_select('system', 's')
  ->fields('s', array('weight'))
  ->condition('name', 'fieldgroup', '=')
  ->execute()
  ->fetchField();
  
  db_update('system')
  ->fields(array('weight' => $weight +1))
  ->condition('name', 'ou_profile', '=')
  ->execute();
}

function ou_profile_install() {

  // Install the client content type
  if (!variable_get('ou_profile_server', 0)) {
    //$date = date(DATE_RFC822);
    //$log = "/tmp/ou_profile.log";
    //$fh = fopen($log, 'a');
    //fwrite($fh, "$date: ou_profile_install called\n");
    /* $content = array();
    include "install/ou_profile_content_type.inc";
    module_load_include('inc', 'modulename', 'modulename.ccknodedef');
    // CCK content_copy.module may not be enabled, so make sure it is included
    require_once './' . drupal_get_path('module', 'content') . '/modules/content_copy/content_copy.module';
    $form_state['values']['type_name'] = '<create>';
    $form_state['values']['macro'] = '$content = ' . var_export($content, TRUE) . ';';
    // form provided by content_copy.module
    drupal_execute('content_copy_import_form', $form_state);
    content_clear_type_cache();
    //fclose($fh);
    */
  }

  ou_profile_node_profile_manage();

 
  // See if we already have some people pages, and if not then create them
  $node_check = drupal_lookup_path('source', 'people');
  if (empty($node_check)) {
     
    // First create our people page
    // Construct the new node object.
    $node = new stdClass();

    $node->title = "People";
    $node->body = "Enter your information about people here";
    $node->type = 'page';   // Your specified content type
    $node->created = time();  
    //print_r(_profile_installed_fields());
    //print_r(_profile_installed_instances());
    //die();
    $node->changed = $node->created;
    $node->status = 1;
    $node->promote = 1;
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = 'en';

    node_save($node);

    $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'people',
    );
    path_save($path);

    // Sit it where it needs to appear in the menu
    $link = array();
    $link['menu_name'] = 'primary-links'; // Fill out your menu name or just use navigation
    $link['link_title'] = 'People'; // What appears in the menu link
    $link['link_path'] = 'node/' . $node->nid; // Or you can use a path alias as well
    menu_link_save($link);
  }

  // Then create our people/people-search page
  $node_check = drupal_lookup_path('source', 'people/people-search');
  if (empty($node_check)) {
    $node = new stdClass();

    $node->title = "Search";
    $node->body = "Enter your message instructing how to search here";
    $node->type = 'page';   // Your specified content type
    $node->created = time();
    $node->changed = $node->created;
    $node->status = 1;
    $node->promote = 1;
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = 'en';

    node_save($node);

    $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'people/people-search',
    );
    path_save($path);
    
    // Sit it where it needs to appear in the menu
    $link = array();
    $link['menu_name'] = 'primary-links'; // Fill out your menu name or just use navigation
    $link['link_title'] = 'People search'; // What appears in the menu link
    $link['link_path'] = 'node/' . $node->nid; // Or you can use a path alias as well
    $link['plid'] = 12; // Optional - if you want it to nest under an item you'll need its mlid (menu id)
    menu_link_save($link);

  }
  
  // Now default both profile types to use the /people path for any created content

  //    ou_profile: used only on the client, contains only the staff id
  variable_set('pathauto_node_ou_profile_pattern', 'people/[title-raw]');
  //    profile: used only on the server - this is the full profile
  variable_set('pathauto_node_profile_pattern', '[field_oup_oucu-raw]');

}

function ou_profile_uninstall() {
  if (!variable_get('ou_profile_server', 0)) {
    //$date = date(DATE_RFC822);  $log = "/tmp/ou_profile.log";
    //$fh = fopen($log, 'a');
    //fwrite($fh, "$date: ou_profile_uninstall called\n");
    //node_type_delete('ou_profile');
    //fclose($fh);
    
    // Gather all the example content that might have been created while this
    // module was enabled.  Simple selects still use db_query().
    // http://api.drupal.org/api/function/db_query/7
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => 'ou_profile'));
    $nids = array();
    foreach ($result as $row) {
      $nids[] = $row->nid;
    }
    
    // Delete all the nodes at once
    // http://api.drupal.org/api/function/node_delete_multiple/7
    node_delete_multiple($nids);
    
    // Loop over each of the fields defined by this module and delete
    // all instances of the field, their data, and the field itself.
    // http://api.drupal.org/api/function/field_delete_field/7
    foreach (array_keys(_profile_installed_fields()) as $field) {
      field_delete_field($field);
    }
    
    // Loop over any remaining field instances attached to the node_example
    // content type (such as the body field) and delete them individually.
    // http://api.drupal.org/api/function/field_delete_field/7
    $instances = field_info_instances('node', 'ou_profile');
    foreach ($instances as $instance_name => $instance) {
      field_delete_instance($instance);
    }
    
    // Delete our content type
    // http://api.drupal.org/api/function/node_type_delete/7
    node_type_delete('ou_profile');
    
    // Purge all field infromation
    // http://api.drupal.org/api/function/field_purge_batch/7
    field_purge_batch(1000);
  }
}

function ou_profile_node_profile_manage() {
  $t = get_t();

  // Create the object filling out as little info as possible
  $node_obj = array(
      'name' => 'OU Profile',
      'type' => 'ou_profile',
      'description' => $t('Reference node that identifies a person\'s OU profile.'),
      'title_label' => $t('Title'),
      'base' => 'node_content',
      'body_label' => 'About me',
      'module' => 'ou_profile',
      'custom' => TRUE,
      /*'min_word_count' => '0',
      'help' => '',
      'node_options' =>
      array(
          'status' => TRUE,
          'promote' => TRUE,
          'sticky' => FALSE,
          'revision' => FALSE,
      ),
      'old_type' => 'ou_profile',
      'orig_type' => '',
      
      
      'modified' => '1',
      'locked' => '0',
      'comment' => '2',
      'comment_default_mode' => '4',
      'comment_default_order' => '1',
      'comment_default_per_page' => '50',
      'comment_controls' => '3',
      'comment_anonymous' => 0,
      'comment_subject_field' => '1',
      'comment_preview' => '1',
      'comment_form_location' => '0',
      */
  );

  // Fill out any default values
  $content_type = node_type_set_defaults($node_obj);

  // Add the body field immediately
  node_add_body_field($content_type, $t('About me'));

  // Save the content type to the database
  $res = node_type_save($content_type);
  
  node_types_rebuild();
  menu_rebuild();
  
  // Create all the fields we need for our content type
  foreach (_profile_installed_fields() as $field) {
    
    field_create_field($field);
  }

  // Add instances of all the fields to the content type
  foreach (_profile_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_obj['type'];
    field_create_instance($instance);
  }
}

// Create the fields required for the profile content type
function _profile_installed_fields() {

  $t = get_t();

  return array(
      'field_pims_unique_id' => array(
          'field_name' => 'field_pims_unique_id',
          'type' => 'text',
          'settings' => array(
              'max_length' => 60,
          )
      ),
  );
}

// Set how the fields should look on the profile content type
function _profile_installed_instances() {
  $t = get_t();
  return array(
      'field_pims_unique_id' => array(
          'field_name' => 'field_pims_unique_id',
          'label' => 'PIMS unique ID',
          'widget' => array(
              'type' => 'text_textfield',
          ),
      ),
    );
}
