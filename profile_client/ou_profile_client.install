<?php
/**
 * @file
 * The ou_profile installation/uninstallation scripts
 */
// $Id$

/**
 * Implementation of hook_enable().
 */
function ou_profile_client_enable() {
  // Set the weight of the this module above fieldgroup, so that hook_form alter can access
  // any forms before being processed by fieldgroup

  $weight = db_select('system', 's')
  ->fields('s', array('weight'))
  ->condition('name', 'fieldgroup', '=')
  ->execute()
  ->fetchField();

  db_update('system')
  ->fields(array('weight' => $weight +1))
  ->condition('name', 'ou_profile', '=')
  ->execute();
}

function ou_profile_client_install() {

  // Install the client content type
  ou_profile_client_node_client_profile_manage();


  // See if we already have some people pages, and if not then create them
  $node_check = drupal_lookup_path('source', 'people');

  if (empty($node_check)) {
    // First create our people page
    // Construct the new node object.
    $node = new stdClass();

    $node->title = "People";
    $node->body = "Enter your information about people here";
    $node->type = 'page';   // Your specified content type
    $node->created = time();
    $node->changed = $node->created;
    $node->status = 1;
    $node->promote = 1;
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = 'en';

    node_save($node);

    $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'people',
    );
    path_save($path);

    // Sit it where it needs to appear in the menu
    $link = array();
    $link['menu_name'] = 'primary-links'; // Fill out your menu name or just use navigation
    $link['link_title'] = 'People'; // What appears in the menu link
    $link['link_path'] = 'node/' . $node->nid; // Or you can use a path alias as well
    menu_link_save($link);
  }

  // Then create our people/people-search page
  $node_check = drupal_lookup_path('source', 'people/people-search');
  if (empty($node_check)) {
    $node = new stdClass();

    $node->title = "Search";
    $node->body = "Enter your message instructing how to search here";
    $node->type = 'page';   // Your specified content type
    $node->created = time();
    $node->changed = $node->created;
    $node->status = 1;
    $node->promote = 1;
    $node->sticky = 0;
    $node->format = 1;       // Filtered HTML
    $node->uid = 1;          // UID of content owner
    $node->language = 'en';

    node_save($node);

    $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'people/people-search',
    );
    path_save($path);

    // Sit it where it needs to appear in the menu
    $link = array();
    $link['menu_name'] = 'primary-links'; // Fill out your menu name or just use navigation
    $link['link_title'] = 'People search'; // What appears in the menu link
    $link['link_path'] = 'node/' . $node->nid; // Or you can use a path alias as well
    $link['plid'] = 12; // Optional - if you want it to nest under an item you'll need its mlid (menu id)
    menu_link_save($link);

  }

  // Now default both profile types to use the /people path for any created content

  //    ou_profile: used only on the client, contains only the staff id
  variable_set('pathauto_node_ou_profile_pattern', 'people/[node:oucu]');

}

function ou_profile_client_uninstall() {

  //Delete admin fields
  variable_del( 'ou_profile_reporting' );
  variable_del( 'ou_profile_client_profile_taxonomy' );
  variable_del( 'ou_profile_client_pims_units' );
  variable_del( 'ou_profile_client_pims_job_title' );

  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'ou_profile'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_profile_client_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'ou_profile');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('ou_profile');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

function ou_profile_client_node_client_profile_manage() {
  $t = get_t();

  // Create the object filling out as little info as possible
  $node_obj = array(
      'name' => 'OU Profile',
      'type' => 'ou_profile',
      'description' => $t('Reference node for client sites that identifies a person\'s OU profile.'),
      'title_label' => $t('Title'),
      'base' => 'node_content',
      'body_label' => 'About me',
      'module' => 'ou_profile',
      'custom' => TRUE,
  );

  // Fill out any default values
  $content_type = node_type_set_defaults($node_obj);

  // Add the body field immediately
  node_add_body_field($content_type, $t('About me'));

  // Save the content type to the database
  $res = node_type_save($content_type);

  // Turn off comments
  variable_set('comment_' . $node_obj['type'] , '1');

  node_types_rebuild();
  menu_rebuild();

  // Create all the fields we need for our content type
  foreach (_profile_client_installed_fields() as $field) {

    field_create_field($field);
  }

  // Add instances of all the fields to the content type
  foreach (_profile_client_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_obj['type'];
    field_create_instance($instance);
  }
}

// Create the fields required for the profile content type
function _profile_client_installed_fields() {

  $t = get_t();

  return array(
      'field_pims_unique_id' => array(
          'field_name' => 'field_pims_unique_id',
          'type' => 'text',
          'settings' => array(
              'max_length' => 60,
          )
      ),
      'field_oup_oucu' => array(
          'field_name' => 'field_oup_oucu',
          'type' => 'text',
          'settings' => array(
              'max_length' => 60,
          )
      ),
      'field_oup_job_title' => array(
          'field_name' => 'field_oup_job_title',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_pims_appt_job_title' => array(
          'field_name' => 'field_pims_appt_job_title',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_pims_l1_estab_unit_desc' => array(
          'field_name' => 'field_pims_l1_estab_unit_desc',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_pims_l2_estab_unit_name' => array(
          'field_name' => 'field_pims_l2_estab_unit_name',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_pims_l3_estab_unit_name' => array(
          'field_name' => 'field_pims_l3_estab_unit_name',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_pims_l4_estab_unit_name' => array(
          'field_name' => 'field_pims_l4_estab_unit_name',
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_profile_taxonomy' => array(
          'field_name' => 'field_profile_taxonomy',
		  'cardinality' => -1,
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
      'field_media_expertise' => array(
          'field_name' => 'field_media_expertise',
		  'cardinality' => -1,
          'type' => 'text',
          'settings' => array(
              'max_length' => 255,
          )
      ),
  );
}

// Set how the fields should look on the profile content type
function _profile_client_installed_instances() {
  $t = get_t();
  return array(
      'field_pims_unique_id' => array(
          'field_name' => 'field_pims_unique_id',
          'label' => 'PIMS unique ID',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_oup_oucu' => array(
          'field_name' => 'field_oup_oucu',
          'label' => 'OUCU',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_oup_job_title' => array(
          'field_name' => 'field_oup_job_title',
          'label' => 'Abbreviated job title',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_pims_appt_job_title' => array(
          'field_name' => 'field_pims_appt_job_title',
          'label' => 'PIMs job title',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_pims_l1_estab_unit_desc' => array(
          'field_name' => 'field_pims_l1_estab_unit_desc',
          'label' => 'PIMs unit lv 1',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_pims_l2_estab_unit_name' => array(
          'field_name' => 'field_pims_l2_estab_unit_name',
          'label' => 'PIMs unit lv 2',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_pims_l3_estab_unit_name' => array(
          'field_name' => 'field_pims_l3_estab_unit_name',
          'label' => 'PIMs unit lv 3',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_pims_l4_estab_unit_name' => array(
          'field_name' => 'field_pims_l4_estab_unit_name',
          'label' => 'PIMs unit lv 4',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_profile_taxonomy' => array(
          'field_name' => 'field_profile_taxonomy',
          'label' => 'Profile taxonomy',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
      'field_media_expertise' => array(
          'field_name' => 'field_media_expertise',
          'label' => 'Media expertise',
          'widget' => array(
              'type' => 'textfield',
          ),
      ),
    );
}


/**
* Update Profile content type with new fields.
*/
function ou_profile_client_update_7100()
{
	// Create the fields we need for our content type.
	foreach (_profile_client_installed_fields() as $field)
	{
		//Check they haven't already been created
		if ( is_null( field_info_field( $field[ 'field_name'] ) ) )
		{
			field_create_field( $field );
		}
	}
	
	// Add instances of all the fields to the content type
	foreach (_profile_client_installed_instances() as $instance)
	{
		//Check they haven't already been created
		if( is_null( field_info_instance( 'node', $instance['field_name'], 'ou_profile' ) ) )
		{
			$instance['entity_type'] = 'node';
			$instance['bundle'] = 'ou_profile';
			field_create_instance( $instance );
		}
	}
	
	return( t( 'OU People Profile Client updates are complete.' ) );
}
